# Knitr global setup - change eval to true to run code
library(knitr)
knitr::opts_chunk$set(echo = TRUE, eval=FALSE, fig.show = "hold", fig.keep = "all")
opts_knit$set(root.dir = 'C:/Users/ap0y/Dropbox/Work Projects/PHD/Metabarcoding/Hemiptera_metabarcoding')
opts_chunk$set(dev = 'png')
# Knitr global setup - change eval to true to run code
library(knitr)
knitr::opts_chunk$set(echo = TRUE, eval=FALSE, fig.show = "hold", fig.keep = "all")
opts_knit$set(root.dir = 'C:/Users/ap0y/Dropbox/Work Projects/PHD/Metabarcoding/HemipteraMetabarcodingMS')
opts_chunk$set(dev = 'png')
getwd()
read_chunk('scripts/summary_func.R')
read_chunk('scripts/summary_func.R')
fast_melt
fast_melt()
```{r echo=FALSE}
read_chunk('scripts/summary_func.R')
read_chunk('scripts/summary_func.R')
<<summary_func>>
sapply(c("dada2", "phyloseq","ggplot2","ips", "DECIPHER", "data.table", "ggplot2", "tidyverse","Biostrings","ShortRead","scales", "psadd","ggpubr"), require, character.only = TRUE)
fast_melt()
fast_melt()
# Knitr global setup - change eval to true to run code
library(knitr)
knitr::opts_chunk$set(echo = TRUE, eval=FALSE, fig.show = "hold", fig.keep = "all")
opts_knit$set(root.dir = 'C:/Users/ap0y/Dropbox/Work Projects/PHD/Metabarcoding/HemipteraMetabarcodingMS')
opts_chunk$set(dev = 'png')
read_chunk('scripts/summary_func.R')
sapply(c("dada2", "phyloseq","ggplot2","ips", "DECIPHER", "data.table", "ggplot2", "tidyverse","Biostrings","ShortRead","scales", "psadd","ggpubr"), require, character.only = TRUE)
fast_melt = function(physeq){
# supports "naked" otu_table as `physeq` input.
otutab = as(otu_table(physeq), "matrix")
if(!taxa_are_rows(physeq)){otutab <- t(otutab)}
otudt = data.table(otutab, keep.rownames = TRUE)
setnames(otudt, "rn", "taxaID")
# Enforce character taxaID key
otudt[, taxaIDchar := as.character(taxaID)]
otudt[, taxaID := NULL]
setnames(otudt, "taxaIDchar", "taxaID")
# Melt count table
mdt = melt.data.table(otudt,
id.vars = "taxaID",
variable.name = "SampleID",
value.name = "count")
# Remove zeroes, NAs
mdt <- mdt[count > 0][!is.na(count)]
# Calculate relative abundance
mdt[, RelativeAbundance := count, by = SampleID]
if(!is.null(tax_table(physeq, errorIfNULL = FALSE))){
# If there is a tax_table, join with it. Otherwise, skip this join.
taxdt = data.table(as(tax_table(physeq, errorIfNULL = TRUE), "matrix"), keep.rownames = TRUE)
setnames(taxdt, "rn", "taxaID")
# Enforce character taxaID key
taxdt[, taxaIDchar := as.character(taxaID)]
taxdt[, taxaID := NULL]
setnames(taxdt, "taxaIDchar", "taxaID")
# Join with tax table
setkey(taxdt, "taxaID")
setkey(mdt, "taxaID")
mdt <- taxdt[mdt]
}
return(mdt)
}
summarize_taxa = function(physeq, Rank, GroupBy = NULL){
Rank <- Rank[1]
if(!Rank %in% rank_names(physeq)){
message("The argument to `Rank` was:\n", Rank,
"\nBut it was not found among taxonomic ranks:\n",
paste0(rank_names(physeq), collapse = ", "), "\n",
"Please check the list shown above and try again.")
}
if(!is.null(GroupBy)){
GroupBy <- GroupBy[1]
if(!GroupBy %in% sample_variables(physeq)){
message("The argument to `GroupBy` was:\n", GroupBy,
"\nBut it was not found among sample variables:\n",
paste0(sample_variables(physeq), collapse = ", "), "\n",
"Please check the list shown above and try again.")
}
}
# Start with fast melt
mdt = fast_melt(physeq)
if(!is.null(GroupBy)){
# Add the variable indicated in `GroupBy`, if provided.
sdt = data.table(SampleID = sample_names(physeq),
var1 = get_variable(physeq, GroupBy))
setnames(sdt, "var1", GroupBy)
# Join
setkey(sdt, SampleID)
setkey(mdt, SampleID)
mdt <- sdt[mdt]
}
# Summarize
summarydt = mdt[, list(totalRA = sum(RelativeAbundance)),
by = c(Rank, GroupBy)]
return(summarydt)
}
fast_melt = function(physeq){
# supports "naked" otu_table as `physeq` input.
otutab = as(otu_table(physeq), "matrix")
if(!taxa_are_rows(physeq)){otutab <- t(otutab)}
otudt = data.table(otutab, keep.rownames = TRUE)
setnames(otudt, "rn", "taxaID")
# Enforce character taxaID key
otudt[, taxaIDchar := as.character(taxaID)]
otudt[, taxaID := NULL]
setnames(otudt, "taxaIDchar", "taxaID")
# Melt count table
mdt = melt.data.table(otudt,
id.vars = "taxaID",
variable.name = "SampleID",
value.name = "count")
# Remove zeroes, NAs
mdt <- mdt[count > 0][!is.na(count)]
# Calculate relative abundance
mdt[, RelativeAbundance := count, by = SampleID]
if(!is.null(tax_table(physeq, errorIfNULL = FALSE))){
# If there is a tax_table, join with it. Otherwise, skip this join.
taxdt = data.table(as(tax_table(physeq, errorIfNULL = TRUE), "matrix"), keep.rownames = TRUE)
setnames(taxdt, "rn", "taxaID")
# Enforce character taxaID key
taxdt[, taxaIDchar := as.character(taxaID)]
taxdt[, taxaID := NULL]
setnames(taxdt, "taxaIDchar", "taxaID")
# Join with tax table
setkey(taxdt, "taxaID")
setkey(mdt, "taxaID")
mdt <- taxdt[mdt]
}
return(mdt)
}
summarize_taxa = function(physeq, Rank, GroupBy = NULL){
Rank <- Rank[1]
if(!Rank %in% rank_names(physeq)){
message("The argument to `Rank` was:\n", Rank,
"\nBut it was not found among taxonomic ranks:\n",
paste0(rank_names(physeq), collapse = ", "), "\n",
"Please check the list shown above and try again.")
}
if(!is.null(GroupBy)){
GroupBy <- GroupBy[1]
if(!GroupBy %in% sample_variables(physeq)){
message("The argument to `GroupBy` was:\n", GroupBy,
"\nBut it was not found among sample variables:\n",
paste0(sample_variables(physeq), collapse = ", "), "\n",
"Please check the list shown above and try again.")
}
}
# Start with fast melt
mdt = fast_melt(physeq)
if(!is.null(GroupBy)){
# Add the variable indicated in `GroupBy`, if provided.
sdt = data.table(SampleID = sample_names(physeq),
var1 = get_variable(physeq, GroupBy))
setnames(sdt, "var1", GroupBy)
# Join
setkey(sdt, SampleID)
setkey(mdt, SampleID)
mdt <- sdt[mdt]
}
# Summarize
summarydt = mdt[, list(totalRA = sum(RelativeAbundance)),
by = c(Rank, GroupBy)]
return(summarydt)
}
fast_melt = function(physeq){
# supports "naked" otu_table as `physeq` input.
otutab = as(otu_table(physeq), "matrix")
if(!taxa_are_rows(physeq)){otutab <- t(otutab)}
otudt = data.table(otutab, keep.rownames = TRUE)
setnames(otudt, "rn", "taxaID")
# Enforce character taxaID key
otudt[, taxaIDchar := as.character(taxaID)]
otudt[, taxaID := NULL]
setnames(otudt, "taxaIDchar", "taxaID")
# Melt count table
mdt = melt.data.table(otudt,
id.vars = "taxaID",
variable.name = "SampleID",
value.name = "count")
# Remove zeroes, NAs
mdt <- mdt[count > 0][!is.na(count)]
# Calculate relative abundance
mdt[, RelativeAbundance := count, by = SampleID]
if(!is.null(tax_table(physeq, errorIfNULL = FALSE))){
# If there is a tax_table, join with it. Otherwise, skip this join.
taxdt = data.table(as(tax_table(physeq, errorIfNULL = TRUE), "matrix"), keep.rownames = TRUE)
setnames(taxdt, "rn", "taxaID")
# Enforce character taxaID key
taxdt[, taxaIDchar := as.character(taxaID)]
taxdt[, taxaID := NULL]
setnames(taxdt, "taxaIDchar", "taxaID")
# Join with tax table
setkey(taxdt, "taxaID")
setkey(mdt, "taxaID")
mdt <- taxdt[mdt]
}
return(mdt)
}
summarize_taxa = function(physeq, Rank, GroupBy = NULL){
Rank <- Rank[1]
if(!Rank %in% rank_names(physeq)){
message("The argument to `Rank` was:\n", Rank,
"\nBut it was not found among taxonomic ranks:\n",
paste0(rank_names(physeq), collapse = ", "), "\n",
"Please check the list shown above and try again.")
}
if(!is.null(GroupBy)){
GroupBy <- GroupBy[1]
if(!GroupBy %in% sample_variables(physeq)){
message("The argument to `GroupBy` was:\n", GroupBy,
"\nBut it was not found among sample variables:\n",
paste0(sample_variables(physeq), collapse = ", "), "\n",
"Please check the list shown above and try again.")
}
}
# Start with fast melt
mdt = fast_melt(physeq)
if(!is.null(GroupBy)){
# Add the variable indicated in `GroupBy`, if provided.
sdt = data.table(SampleID = sample_names(physeq),
var1 = get_variable(physeq, GroupBy))
setnames(sdt, "var1", GroupBy)
# Join
setkey(sdt, SampleID)
setkey(mdt, SampleID)
mdt <- sdt[mdt]
}
# Summarize
summarydt = mdt[, list(totalRA = sum(RelativeAbundance)),
by = c(Rank, GroupBy)]
return(summarydt)
}
seqtab.nochim <- readRDS("output/rds/seqtab_final.rds")
tax_plus <- readRDS("output/rds/tax_boot80_final.rds")
#Load sample information
## ---- samdat ----
samdf <- read.csv("sample_data/Sample_info.csv", header=TRUE)
samdf <- samdf[!duplicated(samdf$SampleID),] #Remove duplicate entries for reverse reads
rownames(samdf) <- samdf$SampleID
keep.cols <- c("collection_date", "biome", "target_gene", "feature",
"sample_name" ,"SampleID","experimental_factor")
samdf <- samdf[rownames(seqtab.nochim), keep.cols]
#Display samDF
head(samdf)
## ---- phyloseq ----
ps <- phyloseq(tax_table(tax_plus), sample_data(samdf),
otu_table(seqtab.nochim, taxa_are_rows = FALSE))
##save phyloseq object
saveRDS(ps, "output/rds/ps_final.rds")
# Knitr global setup - change eval to true to run code
library(knitr)
knitr::opts_chunk$set(echo = TRUE, eval=FALSE, fig.show = "hold", fig.keep = "all")
opts_knit$set(root.dir = 'C:/Users/ap0y/Dropbox/Work Projects/PHD/Metabarcoding/HemipteraMetabarcodingMS')
opts_chunk$set(dev = 'png')
#load scripts from scripts folder
read_chunk('scripts/summary_func.R')
# fastmelt phyloseq function
fast_melt = function(physeq){
# supports "naked" otu_table as `physeq` input.
otutab = as(otu_table(physeq), "matrix")
if(!taxa_are_rows(physeq)){otutab <- t(otutab)}
otudt = data.table(otutab, keep.rownames = TRUE)
setnames(otudt, "rn", "taxaID")
# Enforce character taxaID key
otudt[, taxaIDchar := as.character(taxaID)]
otudt[, taxaID := NULL]
setnames(otudt, "taxaIDchar", "taxaID")
# Melt count table
mdt = melt.data.table(otudt,
id.vars = "taxaID",
variable.name = "SampleID",
value.name = "count")
# Remove zeroes, NAs
mdt <- mdt[count > 0][!is.na(count)]
# Calculate relative abundance
mdt[, RelativeAbundance := count, by = SampleID]
if(!is.null(tax_table(physeq, errorIfNULL = FALSE))){
# If there is a tax_table, join with it. Otherwise, skip this join.
taxdt = data.table(as(tax_table(physeq, errorIfNULL = TRUE), "matrix"), keep.rownames = TRUE)
setnames(taxdt, "rn", "taxaID")
# Enforce character taxaID key
taxdt[, taxaIDchar := as.character(taxaID)]
taxdt[, taxaID := NULL]
setnames(taxdt, "taxaIDchar", "taxaID")
# Join with tax table
setkey(taxdt, "taxaID")
setkey(mdt, "taxaID")
mdt <- taxdt[mdt]
}
return(mdt)
}
# summarize_taxa phyloseq
summarize_taxa = function(physeq, Rank, GroupBy = NULL){
Rank <- Rank[1]
if(!Rank %in% rank_names(physeq)){
message("The argument to `Rank` was:\n", Rank,
"\nBut it was not found among taxonomic ranks:\n",
paste0(rank_names(physeq), collapse = ", "), "\n",
"Please check the list shown above and try again.")
}
if(!is.null(GroupBy)){
GroupBy <- GroupBy[1]
if(!GroupBy %in% sample_variables(physeq)){
message("The argument to `GroupBy` was:\n", GroupBy,
"\nBut it was not found among sample variables:\n",
paste0(sample_variables(physeq), collapse = ", "), "\n",
"Please check the list shown above and try again.")
}
}
# Start with fast melt
mdt = fast_melt(physeq)
if(!is.null(GroupBy)){
# Add the variable indicated in `GroupBy`, if provided.
sdt = data.table(SampleID = sample_names(physeq),
var1 = get_variable(physeq, GroupBy))
setnames(sdt, "var1", GroupBy)
# Join
setkey(sdt, SampleID)
setkey(mdt, SampleID)
mdt <- sdt[mdt]
}
# Summarize
summarydt = mdt[, list(totalRA = sum(RelativeAbundance)),
by = c(Rank, GroupBy)]
return(summarydt)
}
#Function to transform data to proportions
proportions = function(x){
xprop = (x / sum(x))
return(xprop)
}
##Function to transform data to proportions and set low proportions to zero
filterfun = function(x){
xprop = (x / sum(x)) #Convert to proportions
xprop[xprop < (1e-4)] <- 0 ## remove taxa under 0.0001, which is 0.01%
return(xprop)
}
ps <- readRDS("output/rds/ps_final.rds")
dir.create("output/csv")
ps <- readRDS("output/rds/ps_final.rds")
dir.create("output/csv")
##Export raw csv
export <- psmelt(ps)
write.csv(export, file = "output/csv/rawdata.csv")
#Subset data to Athropoda only & Export CSV
ps1 = subset_taxa(ps, Phylum == "Arthropoda")
export <- psmelt(ps1)
write.csv(export, file = "output/csv/raw_arthropoda.csv")
#Convert arthropod data to proportions and apply filter threshold
psFR <- transform_sample_counts(ps1, fun = filterfun)
psFR <- transform_sample_counts(ps1, fun = proportions)
##Export filtered data
export <- psmelt(psFR)
write.csv(export, file = "output/csv/allgene_alltaxa_filt.csv")
#Export Species level only
rm_c1 <-  c("Pool-C1-250","Pool-C2-250","Pool-C3-250","Pool-C4-250","Pool-C5-250")
spp_level <- subset_samples(psFR, sample_names(psFR)!=rm_c1)
spp_level = tax_glom(spp_level, "Species", NArm = TRUE)
sppexport <- psmelt(spp_level)
write.csv(sppexport, file = "output/csv/allgene_spp_filt.csv")
#Summarise to species, and export species summary table
sum_filt <- summarize_taxa(psFR, "Species", "SampleID")
sum_filt <- spread(sum_filt, key="SampleID", value="totalRA")
write.csv(sum_filt, file = "output/csv/allgene_spp_filtsummary.csv")
#Load expected information
exp_seqtab <- as.matrix(read.csv("sample_data/expected/exp_seqtab.csv",row.names=1, header=TRUE))
exp_taxtab <- as.matrix(read.csv("sample_data/expected/exp_taxtab.csv",row.names=1, header=TRUE))
exp_samdf <- read.csv("sample_data/expected/exp_samdf.csv", header=TRUE)
keep.cols <- c("collection_date", "biome", "target_gene", "feature",
"sample_name" ,"SampleID","experimental_factor")
rownames(exp_samdf) <- exp_samdf$SampleID
exp_samdf <- exp_samdf[rownames(exp_seqtab), keep.cols]
## Make phyloseq and merge
ps_exp <- phyloseq(tax_table(exp_taxtab), sample_data(exp_samdf),
otu_table(exp_seqtab, taxa_are_rows = FALSE))
dir.create("output/figs")
positions = c('Pool-01-100', 'Pool-02-100', 'Pool-03-100', 'Pool-04-100', 'Pool-05-100', 'Pool-06-500', 'Pool-07-500', 'Pool-08-500', 'Pool-09-500', 'Pool-10-500', 'Pool-11-1000', 'Pool-12-1000', 'Pool-13-1000', 'Pool-14-1000', 'Pool-15-1000', 'Pool-U1-250', 'Pool-U2-250', 'Pool-U3-250', 'Pool-U4-250', 'Pool-U5-250', 'Trap-01', 'Trap-02', 'Trap-03', 'Trap-04', 'Trap-05', 'Trap-06', 'Trap-07', 'Trap-08', 'Trap-09', 'Trap-10')
#Merge in expecteds
pstemp <- merge_phyloseq(ps1, ps_exp)
pstemp <- transform_sample_counts(pstemp, fun = filterfun) #Apply filter threhsold
#Drop Kingdom column so we have 3 genes merged
tax_table(pstemp) <- tax_table(pstemp)[,2:7]
#export <- psmelt(psFR)
#write.csv(export, file = "filtered.csv")
##Plot mock communties
psmock = subset_samples(pstemp, biome == "Laboratory")
psmock = filter_taxa(psmock, function(x) mean(x) > 0, TRUE)
rm_c1 <-  c("Pool-C1-250","Pool-C2-250","Pool-C3-250","Pool-C4-250","Pool-C5-250")
psmock <- subset_samples(psmock, sample_names(psmock)!=rm_c1)
rm_c1_exp<- c("Pool-C1-250-exp","Pool-C2-250-exp","Pool-C3-250-exp","Pool-C4-250-exp","Pool-C5-250-exp")
psmock <- subset_samples(psmock, sample_names(psmock)!=rm_c1_exp)
psmock = tax_glom(psmock, "Species", NArm = TRUE)
psmock <- transform_sample_counts(psmock, fun= proportions) # Reset scale to 1 following NArm
mdf <- psmelt(psmock)
p <- ggplot(mdf, aes_string(x= "SampleID", y="Abundance", fill= "Genus" ))
p = p + geom_bar(stat = "identity", position = "stack", color = "NA")
p = p + theme(axis.text.x = element_text(angle = -90, hjust = 0))
p = p + ggtitle(paste0("Relative abundance of taxa for all genes in mock communities"))
p = p + xlab("Mock Community")
p = p + scale_fill_brewer(palette="RdYlBu")
p = p + theme_pubclean()
p1 = p + facet_wrap(feature~sample_name, drop=TRUE, scales="free_x") + xlab("feature")+ theme(axis.text.x = element_blank())
psreal = subset_samples(pstemp, experimental_factor != "Exp")
psreal <- subset_samples(psreal, sample_names(psreal)!=rm_c1)
psglom = tax_glom(psreal, "Species", NArm = TRUE)
psglom <- transform_sample_counts(psglom, fun= proportions) # Reset scale to 1 following NArm
p2 <- plot_heatmap(psglom, "NMDS", "bray", taxa.label="Species", title= paste0("All genes Heatmap Species level"), taxa.order="Order", trans=log_trans(2)) + scale_x_discrete(limits = positions)
psglom2 = tax_glom(psreal, "Genus", NArm = TRUE)
psglom2 <- transform_sample_counts(psglom2, fun= proportions) # Reset scale to 1 following NArm
p3 <- plot_heatmap(psglom2, "NMDS", "bray", taxa.label="Genus", title= paste0("All genes Heatmap Genus level"), taxa.order="Order", trans=log_trans(2)) + scale_x_discrete(limits = positions)
##Presence absense for each gene
mdt = fast_melt(psFR)
# Add the variable indicated in `GroupBy`, if provided.
sdt = data.table(SampleID = sample_names(psFR),
var1 = get_variable(psFR, "SampleID"))
setnames(sdt, "var1", "SampleID")
# Join
setkey(sdt, SampleID)
setkey(mdt, SampleID)
mdt <- sdt[mdt]
# Summarize
summarydt = mdt[, list(totalRA = sum(RelativeAbundance)),
by = c("Kingdom","Order","Family", "Genus","Species", "SampleID", "taxaID")]
summarydt <- summarydt[!is.na(summarydt$Species)]
summarydt$totalRA[summarydt$totalRA > 0] <- 1
summarydt$totalRA <- replace(summarydt$totalRA,summarydt > 0, 1)
summarydt$test <- paste(summarydt$Order,summarydt$Family,summarydt$Species,sep="_")
p4 <- ggplot(summarydt, aes(Kingdom, Species)) + geom_tile(aes(fill = totalRA),
colour = "White") + theme_pubclean() + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle = -90, hjust = 0))
pdf(file= "output/figs/allgenes_plots.pdf", paper="a4")
plot(p1)
plot(p2)
plot(p3)
plot(p4)
dev.off()
positions = c('Pool-01-100', 'Pool-02-100', 'Pool-03-100', 'Pool-04-100', 'Pool-05-100', 'Pool-06-500', 'Pool-07-500', 'Pool-08-500', 'Pool-09-500', 'Pool-10-500', 'Pool-11-1000', 'Pool-12-1000', 'Pool-13-1000', 'Pool-14-1000', 'Pool-15-1000', 'Pool-U1-250', 'Pool-U2-250', 'Pool-U3-250', 'Pool-U4-250', 'Pool-U5-250', 'Trap-01', 'Trap-02', 'Trap-03', 'Trap-04', 'Trap-05', 'Trap-06', 'Trap-07', 'Trap-08', 'Trap-09', 'Trap-10')
genes <- unique(psmelt(ps) %>% select(Kingdom))
genes <- as.vector(genes$Kingdom)
genes <- genes[!is.na(genes)]
for (i in seq(along=genes)){
####PROBLEM HERE WILL BE THE MOCKS!
print(genes[i])
ps_gene = subset_taxa(ps, Kingdom == genes[i])
ps_gene = subset_taxa(ps_gene, Phylum == "Arthropoda")
ps_genexp <- merge_phyloseq(ps_gene, ps_exp)
tax_table(ps_genexp) <- tax_table(ps_genexp)[,2:7]
#Summary export
summary <-  subset_samples(ps_genexp, experimental_factor == "O")
gen_summary <- summarize_taxa(summary, "Genus", "SampleID")
gen_summary <- spread(gen_summary, key="SampleID", value="totalRA")
write.csv(gen_summary, file = paste0("output/csv/",genes[i],"_gen_summary.csv"))
sp_summary <- summarize_taxa(summary, "Species", "SampleID")
sp_summary <- spread(sp_summary, key="SampleID", value="totalRA")
write.csv(sp_summary, file = paste0("output/csv/",genes[i],"_sp_summary.csv"))
##Transform data to proportions and set low proportions to zero - NEEDED TO REMOVE INDEX SWITCHING
psra_gene <- transform_sample_counts(ps_genexp, fun = filterfun)
##Remove zero counts
psra_gene = filter_taxa(psra_gene, function(x) mean(x) > 0, TRUE) #Used to be 1e-6
##Figure  1 - Mock communities
##Plot mock communties
psmock_gene = subset_samples(psra_gene, biome == "Laboratory")
psmock_gene = filter_taxa(psmock_gene, function(x) mean(x) > 0, TRUE)
rm_c1 <-  c("Pool-C1-250","Pool-C2-250","Pool-C3-250","Pool-C4-250","Pool-C5-250")
psmock_gene <- subset_samples(psmock_gene, sample_names(psmock_gene)!=rm_c1)
rm_c1_exp<- c("Pool-C1-250-exp","Pool-C2-250-exp","Pool-C3-250-exp","Pool-C4-250-exp","Pool-C5-250-exp")
psmock_gene <- subset_samples(psmock_gene, sample_names(psmock_gene)!=rm_c1_exp)
psmock_gene = tax_glom(psmock_gene, "Species", NArm = TRUE)
psmock_gene <- transform_sample_counts(psmock_gene, fun= proportions) # Reset scale to 1 following NArm
mdf <- psmelt(psmock_gene)
p <- ggplot(mdf, aes_string(x= "SampleID", y="Abundance", fill= "Genus" ))
p = p + geom_bar(stat = "identity", position = "stack", color = "NA")
p = p + theme(axis.text.x = element_text(angle = -90, hjust = 0))
p = p + ggtitle(paste0("Relative abundance of taxa for ", genes[i], " in mock communities"))
p = p + xlab("Mock Community")
p = p + scale_fill_brewer(type="div", palette="RdYlBu")
p = p + theme_pubclean()
p1 = p + facet_wrap(feature~sample_name, drop=TRUE, scales="free_x") + xlab("feature")+ theme(axis.text.x = element_blank())
psreal_gene = subset_samples(psra_gene, experimental_factor != "Exp")
psreal_gene <- subset_samples(psreal_gene, sample_names(psreal_gene)!=rm_c1)
psglom = tax_glom(psreal_gene, "Species", NArm = TRUE)
p2 <- plot_heatmap(psglom, "NMDS", "bray", taxa.label="Species", title= paste0(genes[i]," Heatmap Species level"), taxa.order="Order", trans=log_trans(2)) + scale_x_discrete(limits = positions)
psglom2 = tax_glom(psreal_gene, "Genus", NArm = TRUE)
p3 <- plot_heatmap(psglom2, "NMDS", "bray", taxa.label="Genus", title= paste0(genes[i]," Heatmap Genus level"), taxa.order="Order", trans=log_trans(2)) + scale_x_discrete(limits = positions)
pdf(file= paste0("output/figs/",genes[i],"_plots.pdf"), paper="a4")
plot(p1)
plot(p2)
plot(p3)
dev.off()
}
# Knitr global setup - change eval to true to run code
library(knitr)
knitr::opts_chunk$set(echo = TRUE, eval=FALSE, fig.show = "hold", fig.keep = "all")
opts_knit$set(root.dir = 'C:/Users/ap0y/Dropbox/Work Projects/PHD/Metabarcoding/HemipteraMetabarcodingMS')
setwd('C:/Users/ap0y/Dropbox/Work Projects/PHD/Metabarcoding/HemipteraMetabarcodingMS')
opts_chunk$set(dev = 'png')
#load scripts from scripts folder
read_chunk('scripts/summary_func.R')
library(phyloseq)
ps <- readRDS("output/ps_final.rds")
ps <- readRDS("output/rds/ps_final.rds")
mdf <- psmelt(psmock_gene)
mdf <- psmelt(ps)
df <- psmelt(ps)
View(df)
View(df)
