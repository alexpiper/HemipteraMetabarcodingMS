#demulti$sample[1:10] <- paste0(I7_Index_ID,"_",I5_Index_ID)
colnames(real)[3] <- "sample"
demulti <- left_join(demulti,real,by="sample")
demulti$name[is.na(demulti$name)] <- demulti$sample[is.na(demulti$name)]
##Summary of index switching rate
exp_rate <- demulti %>%
filter(str_detect(sample,paste(c("Pool", "Trap"),collapse = '|')))
obs_rate <- demulti %>%
filter(!str_detect(sample,paste(c("Pool", "Trap"),collapse = '|')))
switch_rate <- (sum(obs_rate$reads)/sum(exp_rate$reads)) *100
##plot index switching
plot <- demulti %>%
separate(name,c("i7","i5"),"_")%>%
select(i7,i5,reads)
p1 <- ggplot(data = plot, aes(x = i7, y = i5), stat="identity") +
geom_tile(aes(fill = reads),alpha=0.9)  + scale_fill_viridis(name = "reads", begin=0.1,trans = "log10")  + geom_text(label=demulti$reads) +
scale_x_discrete(limits=SampleSheet$index,expand=c(0,0))+ scale_y_discrete(limits=SampleSheet$index2,expand=c(0,0)) +
theme(axis.text.x = element_text(angle=90, hjust=1), plot.title=element_text(hjust = 0.5), plot.subtitle =element_text(hjust = 0.5), legend.position = "none") +
labs(title= "100-500-1000 Pool Samples", subtitle = paste0("Index switch rate for the run: ", sprintf("%1.2f%%", switch_rate)))
#Plot with original sample names
searchi5 <- exp_rate$I5_Index_ID
searchi7 <-exp_rate$I7_Index_ID
replacement <- exp_rate$sample
plot2 <- plot
i=1
for (i in 1:length(replacement))
{
plot2$i7 <- as.character(plot2$i7) %>%
str_replace(pattern= as.character(searchi7[i]), replacement=paste0(replacement[i],"-",as.character(searchi7[i])))
plot2$i5 <- as.character(plot2$i5) %>%
str_replace(pattern= as.character(searchi5[i]), replacement=paste0(replacement[i],"-",as.character(searchi5[i])))
}
orderi7 <- c("Pool_1-GACGAGAT", "Pool_2-TAGTGGCA",  "Pool_3-CATTAACG", "Pool_4-TCGTTGAA", "Pool_5-TAGTACGC", "Pool_6-TTCACCGT",
"Pool_7-AGGACAGT", "Pool_8-AATCGTGG",  "Pool_9-TGAATGCC",  "Pool_10-GTGCAATG", "Pool_11-AGTGGCAT",  "Pool_12-AGTCTACC",
"Pool_13-ATCGGTAG",  "Pool_14-CGTATGAT",  "Pool_15-CTGTCGTA")
orderi5 <- c("Pool_1-GACTTCGT", "Pool_2-AATCTCGT",  "Pool_3-TTGCCACT", "Pool_4-GCGTTAAT", "Pool_5-CTTCAACG", "Pool_6-AGCGTACT",
"Pool_7-TACGGTGA", "Pool_8-AACTGTCC",  "Pool_9-GACTGATA",  "Pool_10-ACATCTGC", "Pool_11-ACGTTAGG",  "Pool_12-CACTAGAC",
"Pool_13-TGGCATTC",  "Pool_14-ACATTGCA",  "Pool_15-TATGCCAC")
plot2$i7 <- factor(plot2$i7, levels = orderi7)
plot2$i5 <- factor(plot2$i5 , levels = rev(orderi5))
p2 <- ggplot(data = plot2, aes(x = i7, y = i5), stat="identity") +
geom_tile(aes(fill = reads),alpha=0.9)  + scale_fill_viridis(name = "reads", begin=0.1,trans = "log10")  + geom_text(label=demulti$reads) +
theme(axis.text.x = element_text(angle=90, hjust=1), plot.title=element_text(hjust = 0.5), plot.subtitle =element_text(hjust = 0.5), legend.position = "none") +
labs(title= "100-500-1000 Pool Samples", subtitle = paste0("Index switch rate for the run: ", sprintf("%1.2f%%", switch_rate)))
##Subset to C5
combinatorial <- SampleSheet[1:5,]
unique <- SampleSheet[6:10,]
c5 <- plot[plot$i5 %in% combinatorial$index2 & plot$i7 %in% combinatorial$index, ]
c5plot <- ggplot(data = c5, aes(x = i7, y = i5), stat="identity") +
geom_tile(aes(fill = reads)) + scale_fill_viridis(name = "reads", trans = "log10") + geom_text(label=c5$reads)+
scale_y_discrete(limits=combinatorial$index2,expand=c(0,0)) +  scale_x_discrete(expand=c(0,0))+
theme(axis.text.x = element_text(angle=90, hjust=1), plot.title=element_text(hjust = 0.5), legend.position = "none") +
labs(title= "Combinatorial Indexing")
u5 <- plot[plot$i5 %in% unique$index2 & plot$i7 %in% unique$index, ]
u5plot <-  ggplot(data = u5, aes(x = i7, y = i5), stat="identity", main="Unique-Dual Indexing") +
geom_tile(aes(fill = reads)) + scale_fill_viridis(name = "reads", trans = "log10")  + geom_text(label=u5$reads) +
scale_x_discrete(limits=unique$index,expand=c(0,0))+ scale_y_discrete(limits=unique$index2,expand=c(0,0)) +
theme(axis.text.x = element_text(angle=90, hjust=1), plot.title=element_text(hjust = 0.5), legend.position = "none") +labs(title= "Unique-Dual Indexing")
##Summary of index switching rate - U5
u5_exp <- u5 %>%
filter( reads > 100000)
u5_obs<- u5 %>%
filter( reads < 100000)
switch_rate <- (sum(u5_obs$reads)/sum(u5_exp$reads)) *100
ggarrange(c5plot,u5plot, ncol=2,nrow=1, common.legend = TRUE, legend="bottom")
##CREATE ALL COMBINATIONS
#Read in original sample sheet
SampleSheet <- read_csv("demulti/SampleSheet_Run6.csv",skip=20)
I7_Index_ID <- SampleSheet$index
I5_Index_ID <- SampleSheet$index2
combos <- unique(expand.grid(I7_Index_ID, I5_Index_ID))
combos$name <- paste0(combos$Var1,"_",combos$Var2)
#exclude real combinations
real <- as.data.frame(cbind(I7_Index_ID,I5_Index_ID,SampleSheet$Sample_ID))
real$name <- paste0(real$I7_Index_ID,"_",real$I5_Index_ID)
unexpected <- combos[!combos$name %in% real$name, ]
#write.csv(unexpected,file="demulti/Run6_unexpected.csv")
##READ DEMULTIPLEXED ALL
demulti <- read.table("demulti/readcount_mock.txt")
unique_sample <- demulti$V1 %>%
str_replace_all("-","_") %>%
str_split_fixed("_", n=3)
unique_sample <- paste0(unique_sample[,1],"_",unique_sample[,2])
demulti$V1 <- unique_sample
colnames(demulti) <- c("sample","reads","unique.reads","unique.perc","topseq","topseq.freq","topseq.perc")
demulti <- demulti %>%
distinct(sample, .keep_all=TRUE)
#demulti$sample[1:10] <- paste0(I7_Index_ID,"_",I5_Index_ID)
colnames(real)[3] <- "sample"
demulti <- left_join(demulti,real,by="sample")
demulti$name[is.na(demulti$name)] <- demulti$sample[is.na(demulti$name)]
##Summary of index switching rate
exp_rate <- demulti %>%
filter(str_detect(sample,paste(c("Pool", "Trap"),collapse = '|')))
obs_rate <- demulti %>%
filter(!str_detect(sample,paste(c("Pool", "Trap"),collapse = '|')))
switch_rate <- (sum(obs_rate$reads)/sum(exp_rate$reads)) *100
##plot index switching
plot <- demulti %>%
separate(name,c("i7","i5"),"_")%>%
select(i7,i5,reads)
searchi5 <- exp_rate$I5_Index_ID
searchi7 <-exp_rate$I7_Index_ID
replacement <- exp_rate$sample
i=1
for (i in 1:length(replacement))
{
plot$i7 <- as.character(plot$i7) %>%
str_replace(pattern= as.character(searchi7[i]), replacement=paste0(replacement[i],"-",as.character(searchi7[i])))
plot$i5 <- as.character(plot$i5) %>%
str_replace(pattern= as.character(searchi5[i]), replacement=paste0(replacement[i],"-",as.character(searchi5[i])))
}
orderi7 <- c("Pool_1-GACGAGAT", "Pool_2-TAGTGGCA",  "Pool_3-CATTAACG", "Pool_4-TCGTTGAA", "Pool_5-TAGTACGC", "Pool_6-TTCACCGT",
"Pool_7-AGGACAGT", "Pool_8-AATCGTGG",  "Pool_9-TGAATGCC",  "Pool_10-GTGCAATG", "Pool_11-AGTGGCAT",  "Pool_12-AGTCTACC",
"Pool_13-ATCGGTAG",  "Pool_14-CGTATGAT",  "Pool_15-CTGTCGTA")
orderi5 <- c("Pool_1-GACTTCGT", "Pool_2-AATCTCGT",  "Pool_3-TTGCCACT", "Pool_4-GCGTTAAT", "Pool_5-CTTCAACG", "Pool_6-AGCGTACT",
"Pool_7-TACGGTGA", "Pool_8-AACTGTCC",  "Pool_9-GACTGATA",  "Pool_10-ACATCTGC", "Pool_11-ACGTTAGG",  "Pool_12-CACTAGAC",
"Pool_13-TGGCATTC",  "Pool_14-ACATTGCA",  "Pool_15-TATGCCAC")
plot$i7 <- factor(plot$i7, levels = orderi7)
plot$i5 <- factor(plot$i5 , levels = rev(orderi5))
p2 <- ggplot(data = plot, aes(x = i7, y = i5), stat="identity") +
geom_tile(aes(fill = reads),alpha=0.9)  + scale_fill_viridis(name = "reads", begin=0.1,trans = "log10")  + geom_text(label=demulti$reads) +
theme(axis.text.x = element_text(angle=90, hjust=1), plot.title=element_text(hjust = 0.5), plot.subtitle =element_text(hjust = 0.5), legend.position = "none") +
labs(title= "100-500-1000 Pool Samples", subtitle = paste0("Index switch rate for the run: ", sprintf("%1.2f%%", switch_rate)))
##CREATE ALL COMBINATIONS
#Read in original sample sheet
SampleSheet <- read_csv("demulti/SampleSheet_Run6.csv",skip=20)
I7_Index_ID <- SampleSheet$index
I5_Index_ID <- SampleSheet$index2
combos <- unique(expand.grid(I7_Index_ID, I5_Index_ID))
combos$name <- paste0(combos$Var1,"_",combos$Var2)
#exclude real combinations
real <- as.data.frame(cbind(I7_Index_ID,I5_Index_ID,SampleSheet$Sample_ID))
real$name <- paste0(real$I7_Index_ID,"_",real$I5_Index_ID)
unexpected <- combos[!combos$name %in% real$name, ]
#write.csv(unexpected,file="demulti/Run6_unexpected.csv")
##READ DEMULTIPLEXED ALL
demulti <- read.table("demulti/readcount_mock.txt")
unique_sample <- demulti$V1 %>%
str_replace_all("-","_") %>%
str_split_fixed("_", n=3)
unique_sample <- paste0(unique_sample[,1],"_",unique_sample[,2])
demulti$V1 <- unique_sample
colnames(demulti) <- c("sample","reads","unique.reads","unique.perc","topseq","topseq.freq","topseq.perc")
demulti <- demulti %>%
distinct(sample, .keep_all=TRUE)
#demulti$sample[1:10] <- paste0(I7_Index_ID,"_",I5_Index_ID)
colnames(real)[3] <- "sample"
demulti <- left_join(demulti,real,by="sample")
demulti$name[is.na(demulti$name)] <- demulti$sample[is.na(demulti$name)]
##Summary of index switching rate
exp_rate <- demulti %>%
filter(str_detect(sample,paste(c("Pool", "Trap"),collapse = '|')))
obs_rate <- demulti %>%
filter(!str_detect(sample,paste(c("Pool", "Trap"),collapse = '|')))
switch_rate <- (sum(obs_rate$reads)/sum(exp_rate$reads)) *100
##plot index switching
plot <- demulti %>%
separate(name,c("i7","i5"),"_")%>%
select(i7,i5,reads)
searchi5 <- exp_rate$I5_Index_ID
searchi7 <-exp_rate$I7_Index_ID
replacement <- exp_rate$sample
i=1
for (i in 1:length(replacement))
{
plot$i7 <- as.character(plot$i7) %>%
str_replace(pattern= as.character(searchi7[i]), replacement=paste0(replacement[i],"-",as.character(searchi7[i])))
plot$i5 <- as.character(plot$i5) %>%
str_replace(pattern= as.character(searchi5[i]), replacement=paste0(replacement[i],"-",as.character(searchi5[i])))
}
orderi7 <- c("Pool_1-GACGAGAT", "Pool_2-TAGTGGCA",  "Pool_3-CATTAACG", "Pool_4-TCGTTGAA", "Pool_5-TAGTACGC", "Pool_6-TTCACCGT",
"Pool_7-AGGACAGT", "Pool_8-AATCGTGG",  "Pool_9-TGAATGCC",  "Pool_10-GTGCAATG", "Pool_11-AGTGGCAT",  "Pool_12-AGTCTACC",
"Pool_13-ATCGGTAG",  "Pool_14-CGTATGAT",  "Pool_15-CTGTCGTA")
orderi5 <- c("Pool_1-GACTTCGT", "Pool_2-AATCTCGT",  "Pool_3-TTGCCACT", "Pool_4-GCGTTAAT", "Pool_5-CTTCAACG", "Pool_6-AGCGTACT",
"Pool_7-TACGGTGA", "Pool_8-AACTGTCC",  "Pool_9-GACTGATA",  "Pool_10-ACATCTGC", "Pool_11-ACGTTAGG",  "Pool_12-CACTAGAC",
"Pool_13-TGGCATTC",  "Pool_14-ACATTGCA",  "Pool_15-TATGCCAC")
plot$i7 <- factor(plot$i7, levels = orderi7)
plot$i5 <- factor(plot$i5 , levels = rev(orderi5))
p2 <- ggplot(data = plot, aes(x = i7, y = i5), stat="identity") +
geom_tile(aes(fill = reads),alpha=0.9)  + scale_fill_viridis(name = "reads", begin=0.1,trans = "log10")  + geom_text(label=demulti$reads) +
theme(axis.text.x = element_text(angle=90, hjust=1), plot.title=element_text(hjust = 0.5), plot.subtitle =element_text(hjust = 0.5), legend.position = "none") +
labs(title= "100-500-1000 Pool Samples", subtitle = paste0("Index switch rate for the run: ", sprintf("%1.2f%%", switch_rate)))
p2
pswitch <- ggplot(data = plot, aes(x = i7, y = i5), stat="identity") +
geom_tile(aes(fill = reads),alpha=0.9)  + scale_fill_viridis(name = "reads", begin=0.1,trans = "log10")  + geom_text(label=demulti$reads) +
theme(axis.text.x = element_text(angle=90, hjust=1), plot.title=element_text(hjust = 0.5), plot.subtitle =element_text(hjust = 0.5), legend.position = "none") +
labs(title= "100-500-1000 Pool Samples", subtitle = paste0("Index switch rate for the run: ", sprintf("%1.2f%%", switch_rate)))
pswitch
Fig3 <- ggplot(data = plot, aes(x = i7, y = i5), stat="identity") +
geom_tile(aes(fill = reads),alpha=0.9)  + scale_fill_viridis(name = "reads", begin=0.1,trans = "log10")  + geom_text(label=demulti$reads) +
theme(axis.text.x = element_text(angle=90, hjust=1), plot.title=element_text(hjust = 0.5), plot.subtitle =element_text(hjust = 0.5), legend.position = "none") +
labs(title= "100-500-1000 Pool Samples", subtitle = paste0("Index switch rate for the run: ", sprintf("%1.2f%%", switch_rate)))
Fig3
Fig1
#12s
ps_12s <- subset_taxa(psFR, Gene == "12S-Eukaryota")
View(p12s)
Fig2
#get expected abundances
exp_seqtab <- as.matrix(read.csv("sample_data/expected/exp_seqtab.csv",row.names=1, header=TRUE))
exp_taxtab <- as.matrix(read.csv("sample_data/expected/exp_taxtab.csv",row.names=1, header=TRUE))
exp_samdf <- read.csv("sample_data/expected/exp_samdf.csv", header=TRUE)
keep.cols <- c("collection_date", "biome", "target_gene", "feature",
"pool_comp" ,"SampleID","experimental_factor")
rownames(exp_samdf) <- exp_samdf$SampleID
exp_samdf <- exp_samdf[rownames(exp_seqtab), keep.cols]
## Make phyloseq and merge
ps_exp <- phyloseq(tax_table(exp_taxtab), sample_data(exp_samdf),
otu_table(exp_seqtab, taxa_are_rows = FALSE))
#Figure 1 - Mock communities observed Vs Expected
rm_c1 <-  c("Pool-C1-250","Pool-C2-250","Pool-C3-250","Pool-C4-250","Pool-C5-250")
rm_c1_exp<- c("Pool-C1-250-exp","Pool-C2-250-exp","Pool-C3-250-exp","Pool-C4-250-exp","Pool-C5-250-exp")
#Expected
#Drop Kingdom column so we have 3 genes merged
tax_table(ps_exp) <- tax_table(ps_exp)[,2:7]
ps_exp <- subset_samples(ps_exp, biome == "Laboratory")
ps_exp <- subset_taxa(ps_exp, Phylum == "Arthropoda")
ps_exp <- subset_samples(ps_exp, sample_names(ps_exp)!=rm_c1_exp)
ps_exp = tax_glom(ps_exp, "Species", NArm = TRUE)
##Subset to mock communities
ps_exp = filter_taxa(ps_exp, function(x) mean(x) > 0, TRUE)
ps_exp <- transform_sample_counts(ps_exp, fun= proportions) # Reset scale to 1 following NArm
df_exp <- psmelt(ps_exp)
#Reorder to pool composition
df_exp$SampleID <- factor(df_exp$SampleID, levels = unique(df_exp$SampleID[order(-df_exp$pool_comp)]))
#Plot horizontal mock communities
pexp <- ggplot(df_exp, aes(x= SampleID, y=Abundance,fill= Genus)) +
geom_bar(stat = "identity", position = "stack", color = "NA")  +
theme_pubclean() +
theme(axis.text.x = element_text(angle = -90, hjust = 0),
plot.title=element_text(hjust = 0.5),
legend.position = "none") +
ggtitle(paste0("Expected")) +
scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) +
coord_flip()
## All genes merged
psmock <- psFR
#Drop Kingdom column so we have 3 genes merged
tax_table(psmock) <- tax_table(psmock)[,2:7]
psmock <- subset_samples(psmock, biome == "Laboratory")
psmock <- subset_taxa(psmock, Phylum == "Arthropoda")
rm_c1 <-  c("Pool-C1-250","Pool-C2-250","Pool-C3-250","Pool-C4-250","Pool-C5-250")
psmock <- subset_samples(psmock, sample_names(psmock)!=rm_c1)
psmock = tax_glom(psmock, "Species", NArm = TRUE)
##Subset to mock communities
psmock = filter_taxa(psmock, function(x) mean(x) > 0, TRUE)
psmock <- transform_sample_counts(psmock, fun= proportions) # Reset scale to 1 following NArm
df_mock <- psmelt(psmock)
#Reorder to pool composition
df_mock$SampleID <- factor(df_mock$SampleID, levels = unique(df_mock$SampleID[order(-df_mock$pool_comp)]))
#Plot horizontal mock communities
pmock <- ggplot(df_mock, aes(x= SampleID, y=Abundance,fill= Genus)) +
geom_bar(stat = "identity", position = "stack", color = "NA")  +
theme_pubclean() +
theme(axis.text.x = element_text(angle = -90, hjust = 0),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.title=element_text(hjust = 0.5),
legend.position = "none") +
ggtitle(paste0("3 Genes")) +
scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) +
coord_flip()
#COI
ps_coi <- subset_taxa(psFR, Gene == "COI-Eukaryota")
ps_coi <- subset_taxa(ps_coi, Phylum == "Arthropoda")
ps_coi = subset_samples(ps_coi, biome == "Laboratory")
ps_coi = tax_glom(ps_coi, "Species", NArm = TRUE)
tax_table(ps_coi) <- tax_table(ps_coi)[,2:7]
##Transform data to proportions and set low proportions to zero
psra_coi <- transform_sample_counts(ps_coi, fun = filterfun)
psra_coi = filter_taxa(psra_coi, function(x) mean(x) > 0, TRUE)
#Remove combinatorial indexed samples
psra_coi <- subset_samples(psra_coi, sample_names(psra_coi)!=rm_c1)
psra_coi <- subset_samples(psra_coi, sample_names(psmock)!=rm_c1_exp)
df_coi <- psmelt(psra_coi)
#Reorder to pool composition
df_coi$SampleID <- factor(df_coi$SampleID, levels = unique(df_coi$SampleID[order(-df_coi$pool_comp)]))
#Plot COI mock communities
pcoi <- ggplot(df_coi, aes(x= SampleID, y=Abundance,fill= Genus)) +
geom_bar(stat = "identity", position = "stack", color = "NA")  +
theme_pubclean() +
theme(axis.text.x = element_text(angle = -90, hjust = 0),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.title=element_text(hjust = 0.5),
legend.position = "none") +
ggtitle(paste0("COI")) +
scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) +
coord_flip()
#18S
ps_18s <- subset_taxa(psFR, Gene == "18s-Eukaryota")
ps_18s <- subset_taxa(ps_18s, Phylum == "Arthropoda")
ps_18s = subset_samples(ps_18s, biome == "Laboratory")
ps_18s = tax_glom(ps_18s, "Species", NArm = TRUE)
tax_table(ps_18s) <- tax_table(ps_18s)[,2:7]
##Transform data to proportions and set low proportions to zero
psra_18s <- transform_sample_counts(ps_18s, fun = filterfun)
psra_18s = filter_taxa(psra_18s, function(x) mean(x) > 0, TRUE)
#Remove combinatorial indexed samples
psra_18s <- subset_samples(psra_18s, sample_names(psra_18s)!=rm_c1)
psra_18s <- subset_samples(psra_18s, sample_names(psmock)!=rm_c1_exp)
df_18s <- psmelt(psra_18s)
#Reorder to pool composition
df_18s$SampleID <- factor(df_18s$SampleID, levels = unique(df_18s$SampleID[order(-df_18s$pool_comp)]))
#Plot 18S mock communities
p18s <- ggplot(df_18s, aes(x= SampleID, y=Abundance,fill= Genus)) +
geom_bar(stat = "identity", position = "stack", color = "NA")  +
theme_pubclean() +
theme(axis.text.x = element_text(angle = -90, hjust = 0),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.title=element_text(hjust = 0.5),
legend.position = "none") +
ggtitle(paste0("18S")) +
scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) +
coord_flip()
#12s
ps_12s <- subset_taxa(psFR, Gene == "12S-Eukaryota")
ps_12s <- subset_taxa(ps_12s, Phylum == "Arthropoda")
ps_12s = subset_samples(ps_12s, biome == "Laboratory")
ps_12s = tax_glom(ps_12s, "Species", NArm = TRUE)
tax_table(ps_12s) <- tax_table(ps_12s)[,2:7]
##Transform data to proportions and set low proportions to zero
psra_12s <- transform_sample_counts(ps_12s, fun = filterfun)
psra_12s = filter_taxa(psra_12s, function(x) mean(x) > 0, TRUE)
#Remove combinatorial indexed samples
psra_12s <- subset_samples(psra_12s, sample_names(psra_12s)!=rm_c1)
psra_12s <- subset_samples(psra_12s, sample_names(psmock)!=rm_c1_exp)
df_12s <- psmelt(psra_12s)
#Reorder to pool composition
df_12s$SampleID <- factor(df_12s$SampleID, levels = unique(df_12s$SampleID[order(-df_12s$pool_comp)]))
#Plot 12s mock communities
p12s <- ggplot(df_12s, aes(x= SampleID, y=Abundance,fill= Genus)) +
geom_bar(stat = "identity", position = "stack", color = "NA")  +
theme_pubclean() +
theme(axis.text.x = element_text(angle = -90, hjust = 0),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.title=element_text(hjust = 0.5),
legend.position = "none") +
ggtitle(paste0("12s")) +
scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) +
coord_flip()
#Use patchwork to stich together
Fig1 <- pexp + pmock + pcoi + p18s + p12s + plot_layout(ncol = 5)
Fig1
#get expected abundances
exp_seqtab <- as.matrix(read.csv("sample_data/expected/exp_seqtab.csv",row.names=1, header=TRUE))
exp_taxtab <- as.matrix(read.csv("sample_data/expected/exp_taxtab.csv",row.names=1, header=TRUE))
exp_samdf <- read.csv("sample_data/expected/exp_samdf.csv", header=TRUE)
keep.cols <- c("collection_date", "biome", "target_gene", "feature",
"pool_comp" ,"SampleID","experimental_factor")
rownames(exp_samdf) <- exp_samdf$SampleID
exp_samdf <- exp_samdf[rownames(exp_seqtab), keep.cols]
## Make phyloseq and merge
ps_exp <- phyloseq(tax_table(exp_taxtab), sample_data(exp_samdf),
otu_table(exp_seqtab, taxa_are_rows = FALSE))
#Figure 1 - Mock communities observed Vs Expected
rm_c1 <-  c("Pool-C1-250","Pool-C2-250","Pool-C3-250","Pool-C4-250","Pool-C5-250")
rm_c1_exp<- c("Pool-C1-250-exp","Pool-C2-250-exp","Pool-C3-250-exp","Pool-C4-250-exp","Pool-C5-250-exp")
#Expected
#Drop Kingdom column so we have 3 genes merged
tax_table(ps_exp) <- tax_table(ps_exp)[,2:7]
ps_exp <- subset_samples(ps_exp, biome == "Laboratory")
ps_exp <- subset_taxa(ps_exp, Phylum == "Arthropoda")
ps_exp <- subset_samples(ps_exp, sample_names(ps_exp)!=rm_c1_exp)
ps_exp = tax_glom(ps_exp, "Species", NArm = TRUE)
##Subset to mock communities
ps_exp = filter_taxa(ps_exp, function(x) mean(x) > 0, TRUE)
ps_exp <- transform_sample_counts(ps_exp, fun= proportions) # Reset scale to 1 following NArm
df_exp <- psmelt(ps_exp)
#Reorder to pool composition
df_exp$SampleID <- factor(df_exp$SampleID, levels = unique(df_exp$SampleID[order(-df_exp$pool_comp)]))
#Plot horizontal mock communities
pexp <- ggplot(df_exp, aes(x= SampleID, y=Abundance,fill= Genus)) +
geom_bar(stat = "identity", position = "stack", color = "NA")  +
theme_pubclean() +
theme(axis.text.x = element_text(angle = -90, hjust = 0),
plot.title=element_text(hjust = 0.5)) +
ggtitle(paste0("Expected")) +
scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) +
coord_flip()
## All genes merged
psmock <- psFR
#Drop Kingdom column so we have 3 genes merged
tax_table(psmock) <- tax_table(psmock)[,2:7]
psmock <- subset_samples(psmock, biome == "Laboratory")
psmock <- subset_taxa(psmock, Phylum == "Arthropoda")
rm_c1 <-  c("Pool-C1-250","Pool-C2-250","Pool-C3-250","Pool-C4-250","Pool-C5-250")
psmock <- subset_samples(psmock, sample_names(psmock)!=rm_c1)
psmock = tax_glom(psmock, "Species", NArm = TRUE)
##Subset to mock communities
psmock = filter_taxa(psmock, function(x) mean(x) > 0, TRUE)
psmock <- transform_sample_counts(psmock, fun= proportions) # Reset scale to 1 following NArm
df_mock <- psmelt(psmock)
#Reorder to pool composition
df_mock$SampleID <- factor(df_mock$SampleID, levels = unique(df_mock$SampleID[order(-df_mock$pool_comp)]))
#Plot horizontal mock communities
pmock <- ggplot(df_mock, aes(x= SampleID, y=Abundance,fill= Genus)) +
geom_bar(stat = "identity", position = "stack", color = "NA")  +
theme_pubclean() +
theme(axis.text.x = element_text(angle = -90, hjust = 0),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.title=element_text(hjust = 0.5),
legend.position = "none") +
ggtitle(paste0("3 Genes")) +
scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) +
coord_flip()
#COI
ps_coi <- subset_taxa(psFR, Gene == "COI-Eukaryota")
ps_coi <- subset_taxa(ps_coi, Phylum == "Arthropoda")
ps_coi = subset_samples(ps_coi, biome == "Laboratory")
ps_coi = tax_glom(ps_coi, "Species", NArm = TRUE)
tax_table(ps_coi) <- tax_table(ps_coi)[,2:7]
##Transform data to proportions and set low proportions to zero
psra_coi <- transform_sample_counts(ps_coi, fun = filterfun)
psra_coi = filter_taxa(psra_coi, function(x) mean(x) > 0, TRUE)
#Remove combinatorial indexed samples
psra_coi <- subset_samples(psra_coi, sample_names(psra_coi)!=rm_c1)
psra_coi <- subset_samples(psra_coi, sample_names(psmock)!=rm_c1_exp)
df_coi <- psmelt(psra_coi)
#Reorder to pool composition
df_coi$SampleID <- factor(df_coi$SampleID, levels = unique(df_coi$SampleID[order(-df_coi$pool_comp)]))
#Plot COI mock communities
pcoi <- ggplot(df_coi, aes(x= SampleID, y=Abundance,fill= Genus)) +
geom_bar(stat = "identity", position = "stack", color = "NA")  +
theme_pubclean() +
theme(axis.text.x = element_text(angle = -90, hjust = 0),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.title=element_text(hjust = 0.5),
legend.position = "none") +
ggtitle(paste0("COI")) +
scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) +
coord_flip()
#18S
ps_18s <- subset_taxa(psFR, Gene == "18s-Eukaryota")
ps_18s <- subset_taxa(ps_18s, Phylum == "Arthropoda")
ps_18s = subset_samples(ps_18s, biome == "Laboratory")
ps_18s = tax_glom(ps_18s, "Species", NArm = TRUE)
tax_table(ps_18s) <- tax_table(ps_18s)[,2:7]
##Transform data to proportions and set low proportions to zero
psra_18s <- transform_sample_counts(ps_18s, fun = filterfun)
psra_18s = filter_taxa(psra_18s, function(x) mean(x) > 0, TRUE)
#Remove combinatorial indexed samples
psra_18s <- subset_samples(psra_18s, sample_names(psra_18s)!=rm_c1)
psra_18s <- subset_samples(psra_18s, sample_names(psmock)!=rm_c1_exp)
df_18s <- psmelt(psra_18s)
#Reorder to pool composition
df_18s$SampleID <- factor(df_18s$SampleID, levels = unique(df_18s$SampleID[order(-df_18s$pool_comp)]))
#Plot 18S mock communities
p18s <- ggplot(df_18s, aes(x= SampleID, y=Abundance,fill= Genus)) +
geom_bar(stat = "identity", position = "stack", color = "NA")  +
theme_pubclean() +
theme(axis.text.x = element_text(angle = -90, hjust = 0),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.title=element_text(hjust = 0.5),
legend.position = "none") +
ggtitle(paste0("18S")) +
scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) +
coord_flip()
#12s
ps_12s <- subset_taxa(psFR, Gene == "12S-Eukaryota")
ps_12s <- subset_taxa(ps_12s, Phylum == "Arthropoda")
ps_12s = subset_samples(ps_12s, biome == "Laboratory")
ps_12s = tax_glom(ps_12s, "Species", NArm = TRUE)
tax_table(ps_12s) <- tax_table(ps_12s)[,2:7]
##Transform data to proportions and set low proportions to zero
psra_12s <- transform_sample_counts(ps_12s, fun = filterfun)
psra_12s = filter_taxa(psra_12s, function(x) mean(x) > 0, TRUE)
#Remove combinatorial indexed samples
psra_12s <- subset_samples(psra_12s, sample_names(psra_12s)!=rm_c1)
psra_12s <- subset_samples(psra_12s, sample_names(psmock)!=rm_c1_exp)
df_12s <- psmelt(psra_12s)
#Reorder to pool composition
df_12s$SampleID <- factor(df_12s$SampleID, levels = unique(df_12s$SampleID[order(-df_12s$pool_comp)]))
#Plot 12s mock communities
p12s <- ggplot(df_12s, aes(x= SampleID, y=Abundance,fill= Genus)) +
geom_bar(stat = "identity", position = "stack", color = "NA")  +
theme_pubclean() +
theme(axis.text.x = element_text(angle = -90, hjust = 0),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.title=element_text(hjust = 0.5),
legend.position = "none") +
ggtitle(paste0("12s")) +
scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) +
coord_flip()
#Use patchwork to stich together
Fig1 <- pexp + pmock + pcoi + p18s + p12s + plot_layout(ncol = 5)
Fig1
tax_table(p12s)
tax_table(ps_12s)
