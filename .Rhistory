Fig2 <- pname + p5 + p4 + plot_layout(ncol = 3, widths=c(1,2,3))
Fig1
Fig2
Fig1
Fig2
positions = c('Pool-01-100', 'Pool-02-100', 'Pool-03-100', 'Pool-04-100', 'Pool-05-100', 'Pool-06-500', 'Pool-07-500', 'Pool-08-500', 'Pool-09-500', 'Pool-10-500', 'Pool-11-1000', 'Pool-12-1000', 'Pool-13-1000', 'Pool-14-1000', 'Pool-15-1000', 'Pool-U1-250', 'Pool-U2-250', 'Pool-U3-250', 'Pool-U4-250', 'Pool-U5-250', 'Trap-01', 'Trap-02', 'Trap-03', 'Trap-04', 'Trap-05', 'Trap-06', 'Trap-07', 'Trap-08', 'Trap-09', 'Trap-10')
genes <- unique(psmelt(ps) %>% select(Gene))
genes <- as.vector(genes$Gene)
genes <- genes[!is.na(genes)]
for (i in seq(along=genes)){
print(genes[i])
ps_gene = subset_taxa(psFR, Gene == genes[i])
ps_gene = subset_taxa(ps_gene, Phylum == "Arthropoda")
ps_genexp <- merge_phyloseq(ps_gene, ps_exp)
tax_table(ps_genexp) <- tax_table(ps_genexp)[,2:7]
#Summary export
summary <-  subset_samples(ps_genexp, experimental_factor == "O")
sp_summary <- summarize_taxa(summary, "Species", "SampleID")
sp_summary <- spread(sp_summary, key="SampleID", value="totalRA")
write.csv(sp_summary, file = paste0("output/csv/seperategenes/",genes[i],"_sppglom_filt_summarized.csv"))
gen_summary <- summarize_taxa(summary, "Genus", "SampleID")
gen_summary <- spread(gen_summary, key="SampleID", value="totalRA")
write.csv(gen_summary, file = paste0("output/csv/seperategenes/",genes[i],"_genglom_filt_summarized.csv"))
##Transform data to proportions and set low proportions to zero - NEEDED TO REMOVE INDEX SWITCHING
psra_gene <- transform_sample_counts(ps_genexp, fun = filterfun)
##Remove zero counts
psra_gene = filter_taxa(psra_gene, function(x) mean(x) > 0, TRUE) #Used to be 1e-6
##Subset to mock communities
psmock = subset_samples(psra_gene, biome == "Laboratory")
psmock = filter_taxa(psmock, function(x) mean(x) > 0, TRUE)
rm_c1 <-  c("Pool-C1-250","Pool-C2-250","Pool-C3-250","Pool-C4-250","Pool-C5-250")
psmock <- subset_samples(psmock, sample_names(psmock)!=rm_c1)
rm_c1_exp<- c("Pool-C1-250-exp","Pool-C2-250-exp","Pool-C3-250-exp","Pool-C4-250-exp","Pool-C5-250-exp")
psmock <- subset_samples(psmock, sample_names(psmock)!=rm_c1_exp)
psmock = tax_glom(psmock, "Species", NArm = TRUE)
psmock <- transform_sample_counts(psmock, fun= proportions) # Reset scale to 1 following NArm
mdf <- psmelt(psmock)
#Reorder to pool composition
mdf$SampleID <- factor(mdf$SampleID, levels = unique(mdf$SampleID[order(-mdf$pool_comp)]))
#Plot horizontal mock communities
p <- ggplot(mdf, aes(x= SampleID, y=Abundance,fill= Genus))
p = p + geom_bar(stat = "identity", position = "stack", color = "NA")
p = p + theme(axis.text.x = element_text(angle = -90, hjust = 0))
p = p + ggtitle(paste0("Relative abundance of taxa for all genes in mock communities"))
p = p + xlab("Mock Community")
p = p + scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77"))
p = p + theme_pubclean()
p1 =  p + facet_wrap(~experimental_factor, drop=TRUE, scales="free")  + coord_flip() #+ theme(axis.text.y = element_blank(), axis.ticks.y=element_blank())
#plot obs/exp seperated 2 rows
p2 = p + facet_wrap(~experimental_factor, nrow=2,ncol=1,drop=TRUE, scales="free") + coord_flip()
#Plot Heatmap
psreal_gene = subset_samples(psra_gene, experimental_factor != "Exp")
psreal_gene <- subset_samples(psreal_gene, sample_names(psreal_gene)!=rm_c1)
psglom = tax_glom(psreal_gene, "Species", NArm = TRUE)
p3 <- plot_heatmap(psglom, "NMDS", "bray", taxa.label="Species", title= paste0(genes[i]," Heatmap Species level"), taxa.order="Family") + theme_pubr()  + scale_x_discrete(limits = positions) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank(), legend.position="none") + scale_fill_viridis(trans=log_trans(10), na.value="grey10")
#Plot correlations
##Calculate observed vs expected
psgen = tax_glom(psmock, "Genus", NArm = TRUE)
psgen <- transform_sample_counts(psgen, fun= proportions) # Reset scale to 1 following NArm
psgen <- psmelt(psgen)
mock_exp <- psgen %>%
filter(experimental_factor=="Exp") %>%
subset(select=c("Abundance","Sample","Genus"))
mock_exp$Sample <-str_remove(mock_exp$Sample,pattern="-exp")
colnames(mock_exp) <- c("Expected","Sample","Genus")
mock_obs <- psgen %>%
filter(experimental_factor=="O") %>%
subset(select=c("Abundance","Sample","Genus"))
colnames(mock_obs) <- c("Observed","Sample","Genus")
expobs <- left_join(mock_exp,mock_obs, by=c("Sample","Genus")) %>%
filter(Observed>0)
g <- ggplot(expobs,aes(x=Expected,y=Observed)) + geom_point(aes(colour=Genus)) + geom_abline(slope=1, intercept = 0) +
geom_segment(aes(xend = Expected, yend = Observed)) +
stat_cor(aes(color = Genus), label.x = 0.1)  + xlim(0,1) + ylim(0,1) + scale_colour_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) + theme_pubr() + theme(legend.position = "none")
##Get differences
expobs$bias <- expobs$Observed - expobs$Expected
g2 <- ggplot(expobs,aes(x=Genus,y=bias)) + geom_bar(aes(fill=Genus),stat = "summary", fun.y = "mean") + geom_abline(slope=0, intercept = 0) + scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) + theme_pubr() #+ coord_flip()
pdf(file= paste0("output/figs/",genes[i],"_plots.pdf"), paper="a4")
plot(p1)
plot(p2)
plot(g)
plot(g2)
plot(p3)
dev.off()
}
positions = c('Pool-01-100', 'Pool-02-100', 'Pool-03-100', 'Pool-04-100', 'Pool-05-100', 'Pool-06-500', 'Pool-07-500', 'Pool-08-500', 'Pool-09-500', 'Pool-10-500', 'Pool-11-1000', 'Pool-12-1000', 'Pool-13-1000', 'Pool-14-1000', 'Pool-15-1000', 'Pool-U1-250', 'Pool-U2-250', 'Pool-U3-250', 'Pool-U4-250', 'Pool-U5-250', 'Trap-01', 'Trap-02', 'Trap-03', 'Trap-04', 'Trap-05', 'Trap-06', 'Trap-07', 'Trap-08', 'Trap-09', 'Trap-10')
genes <- unique(psmelt(ps) %>% select(Gene))
genes <- as.vector(genes$Gene)
genes <- genes[!is.na(genes)]
for (i in seq(along=genes)){
print(genes[i])
ps_gene = subset_taxa(psFR, Gene == genes[i])
ps_gene = subset_taxa(ps_gene, Phylum == "Arthropoda")
ps_genexp <- merge_phyloseq(ps_gene, ps_exp)
tax_table(ps_genexp) <- tax_table(ps_genexp)[,2:7]
#Summary export
summary <-  subset_samples(ps_genexp, experimental_factor == "O")
sp_summary <- summarize_taxa(summary, "Species", "SampleID")
sp_summary <- spread(sp_summary, key="SampleID", value="totalRA")
write.csv(sp_summary, file = paste0("output/csv/seperategenes/",genes[i],"_sppglom_filt_summarized.csv"))
gen_summary <- summarize_taxa(summary, "Genus", "SampleID")
gen_summary <- spread(gen_summary, key="SampleID", value="totalRA")
write.csv(gen_summary, file = paste0("output/csv/seperategenes/",genes[i],"_genglom_filt_summarized.csv"))
##Transform data to proportions and set low proportions to zero - NEEDED TO REMOVE INDEX SWITCHING
psra_gene <- transform_sample_counts(ps_genexp, fun = filterfun)
##Remove zero counts
psra_gene = filter_taxa(psra_gene, function(x) mean(x) > 0, TRUE) #Used to be 1e-6
##Subset to mock communities
psmock = subset_samples(psra_gene, biome == "Laboratory")
psmock = filter_taxa(psmock, function(x) mean(x) > 0, TRUE)
rm_c1 <-  c("Pool-C1-250","Pool-C2-250","Pool-C3-250","Pool-C4-250","Pool-C5-250")
psmock <- subset_samples(psmock, sample_names(psmock)!=rm_c1)
rm_c1_exp<- c("Pool-C1-250-exp","Pool-C2-250-exp","Pool-C3-250-exp","Pool-C4-250-exp","Pool-C5-250-exp")
psmock <- subset_samples(psmock, sample_names(psmock)!=rm_c1_exp)
psmock = tax_glom(psmock, "Species", NArm = TRUE)
psmock <- transform_sample_counts(psmock, fun= proportions) # Reset scale to 1 following NArm
mdf <- psmelt(psmock)
#Reorder to pool composition
mdf$SampleID <- factor(mdf$SampleID, levels = unique(mdf$SampleID[order(-mdf$pool_comp)]))
#Plot horizontal mock communities
p <- ggplot(mdf, aes(x= SampleID, y=Abundance,fill= Genus))
p = p + geom_bar(stat = "identity", position = "stack", color = "NA")
p = p + theme(axis.text.x = element_text(angle = -90, hjust = 0))
p = p + ggtitle(paste0("Relative abundance of taxa for all genes in mock communities"))
p = p + xlab("Mock Community")
p = p + scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77"))
p = p + theme_pubclean()
p1 =  p + facet_wrap(~experimental_factor, drop=TRUE, scales="free")  + coord_flip() #+ theme(axis.text.y = element_blank(), axis.ticks.y=element_blank())
#plot obs/exp seperated 2 rows
p2 = p + facet_wrap(~experimental_factor, nrow=2,ncol=1,drop=TRUE, scales="free") + coord_flip()
#Plot Heatmap
psreal_gene = subset_samples(psra_gene, experimental_factor != "Exp")
psreal_gene <- subset_samples(psreal_gene, sample_names(psreal_gene)!=rm_c1)
psglom = tax_glom(psreal_gene, "Species", NArm = TRUE)
p3 <- plot_heatmap(psglom, "NMDS", "bray", taxa.label="Species", title= paste0(genes[i]," Heatmap Species level"), taxa.order="Family") + theme_pubr()  + scale_x_discrete(limits = positions) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank(), legend.position="none") + scale_fill_viridis(trans=log_trans(10), na.value="grey10")
#Plot correlations
##Calculate observed vs expected
psgen = tax_glom(psmock, "Genus", NArm = TRUE)
psgen <- transform_sample_counts(psgen, fun= proportions) # Reset scale to 1 following NArm
psgen <- psmelt(psgen)
mock_exp <- psgen %>%
filter(experimental_factor=="Exp") %>%
subset(select=c("Abundance","Sample","Genus"))
mock_exp$Sample <-str_remove(mock_exp$Sample,pattern="-exp")
colnames(mock_exp) <- c("Expected","Sample","Genus")
mock_obs <- psgen %>%
filter(experimental_factor=="O") %>%
subset(select=c("Abundance","Sample","Genus"))
colnames(mock_obs) <- c("Observed","Sample","Genus")
expobs <- left_join(mock_exp,mock_obs, by=c("Sample","Genus")) %>%
filter(Observed>0)
g <- ggplot(expobs,aes(x=Expected,y=Observed)) + geom_point(aes(colour=Genus)) + geom_abline(slope=1, intercept = 0) +
geom_segment(aes(xend = Expected, yend = Observed)) +
stat_cor(aes(color = Genus), label.x = 0.1)  + xlim(0,1) + ylim(0,1) + scale_colour_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) + theme_pubr() + theme(legend.position = "none")
##Get differences
expobs$bias <- expobs$Observed - expobs$Expected
g2 <- ggplot(expobs,aes(x=Genus,y=bias)) + geom_bar(aes(fill=Genus),stat = "summary", fun.y = "mean") + geom_abline(slope=0, intercept = 0) + scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) + theme_pubr() #+ coord_flip()
pdf(file= paste0("output/figs/",genes[i],"_plots.pdf"), paper="a4")
plot(p1)
plot(p2)
plot(g)
plot(g2)
plot(p3)
dev.off()
}
p2
positions = c('Pool-01-100', 'Pool-02-100', 'Pool-03-100', 'Pool-04-100', 'Pool-05-100', 'Pool-06-500', 'Pool-07-500', 'Pool-08-500', 'Pool-09-500', 'Pool-10-500', 'Pool-11-1000', 'Pool-12-1000', 'Pool-13-1000', 'Pool-14-1000', 'Pool-15-1000', 'Pool-U1-250', 'Pool-U2-250', 'Pool-U3-250', 'Pool-U4-250', 'Pool-U5-250', 'Trap-01', 'Trap-02', 'Trap-03', 'Trap-04', 'Trap-05', 'Trap-06', 'Trap-07', 'Trap-08', 'Trap-09', 'Trap-10')
genes <- unique(psmelt(ps) %>% select(Gene))
genes <- as.vector(genes$Gene)
genes <- genes[!is.na(genes)]
for (i in seq(along=genes)){
print(genes[i])
ps_gene = subset_taxa(psFR, Gene == genes[i])
ps_gene = subset_taxa(ps_gene, Phylum == "Arthropoda")
ps_genexp <- merge_phyloseq(ps_gene, ps_exp)
tax_table(ps_genexp) <- tax_table(ps_genexp)[,2:7]
#Summary export
summary <-  subset_samples(ps_genexp, experimental_factor == "O")
sp_summary <- summarize_taxa(summary, "Species", "SampleID")
sp_summary <- spread(sp_summary, key="SampleID", value="totalRA")
write.csv(sp_summary, file = paste0("output/csv/seperategenes/",genes[i],"_sppglom_filt_summarized.csv"))
gen_summary <- summarize_taxa(summary, "Genus", "SampleID")
gen_summary <- spread(gen_summary, key="SampleID", value="totalRA")
write.csv(gen_summary, file = paste0("output/csv/seperategenes/",genes[i],"_genglom_filt_summarized.csv"))
##Transform data to proportions and set low proportions to zero - NEEDED TO REMOVE INDEX SWITCHING
psra_gene <- transform_sample_counts(ps_genexp, fun = filterfun)
##Remove zero counts
psra_gene = filter_taxa(psra_gene, function(x) mean(x) > 0, TRUE) #Used to be 1e-6
##Subset to mock communities
psmock = subset_samples(psra_gene, biome == "Laboratory")
psmock = filter_taxa(psmock, function(x) mean(x) > 0, TRUE)
rm_c1 <-  c("Pool-C1-250","Pool-C2-250","Pool-C3-250","Pool-C4-250","Pool-C5-250")
psmock <- subset_samples(psmock, sample_names(psmock)!=rm_c1)
rm_c1_exp<- c("Pool-C1-250-exp","Pool-C2-250-exp","Pool-C3-250-exp","Pool-C4-250-exp","Pool-C5-250-exp")
psmock <- subset_samples(psmock, sample_names(psmock)!=rm_c1_exp)
psmock = tax_glom(psmock, "Species", NArm = TRUE)
psmock <- transform_sample_counts(psmock, fun= proportions) # Reset scale to 1 following NArm
mdf <- psmelt(psmock)
#Reorder to pool composition
mdf$SampleID <- factor(mdf$SampleID, levels = unique(mdf$SampleID[order(-mdf$pool_comp)]))
#Plot horizontal mock communities
p <- ggplot(mdf, aes(x= SampleID, y=Abundance,fill= Genus))
p = p + geom_bar(stat = "identity", position = "stack", color = "NA")
p = p + theme(axis.text.x = element_text(angle = -90, hjust = 0))
p = p + ggtitle(paste0("Relative abundance of taxa for all genes in mock communities"))
p = p + xlab("Mock Community")
p = p + scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77"))
p = p + theme_pubclean()
p1 =  p + facet_wrap(~experimental_factor, drop=TRUE, scales="free")  + coord_flip() #+ theme(axis.text.y = element_blank(), axis.ticks.y=element_blank())
#plot obs/exp seperated 2 rows
p2 = p + facet_wrap(~experimental_factor, nrow=2,ncol=1,drop=TRUE, scales="free") + coord_flip()
#Plot Heatmap
psreal_gene = subset_samples(psra_gene, experimental_factor != "Exp")
psreal_gene <- subset_samples(psreal_gene, sample_names(psreal_gene)!=rm_c1)
psglom = tax_glom(psreal_gene, "Species", NArm = TRUE)
p3 <- plot_heatmap(psglom, "NMDS", "bray", taxa.label="Species", title= paste0(genes[i]," Heatmap Species level"), taxa.order="Family") + theme_pubr()  + scale_x_discrete(limits = positions) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank(), legend.position="none") + scale_fill_viridis(trans=log_trans(10), na.value="grey10")
#Plot correlations
##Calculate observed vs expected
psgen = tax_glom(psmock, "Genus", NArm = TRUE)
psgen <- transform_sample_counts(psgen, fun= proportions) # Reset scale to 1 following NArm
psgen <- psmelt(psgen)
mock_exp <- psgen %>%
filter(experimental_factor=="Exp") %>%
subset(select=c("Abundance","Sample","Genus"))
mock_exp$Sample <-str_remove(mock_exp$Sample,pattern="-exp")
colnames(mock_exp) <- c("Expected","Sample","Genus")
mock_obs <- psgen %>%
filter(experimental_factor=="O") %>%
subset(select=c("Abundance","Sample","Genus"))
colnames(mock_obs) <- c("Observed","Sample","Genus")
expobs <- left_join(mock_exp,mock_obs, by=c("Sample","Genus")) %>%
filter(Observed>0)
g <- ggplot(expobs,aes(x=Expected,y=Observed)) + geom_point(aes(colour=Genus)) + geom_abline(slope=1, intercept = 0) +
geom_segment(aes(xend = Expected, yend = Observed)) +
stat_cor(aes(color = Genus), label.x = 0.1)  + xlim(0,1) + ylim(0,1) + scale_colour_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) + theme_pubr() + theme(legend.position = "none")
##Get differences
expobs$bias <- expobs$Observed - expobs$Expected
g2 <- ggplot(expobs,aes(x=Genus,y=bias)) + geom_bar(aes(fill=Genus),stat = "summary", fun.y = "mean") + geom_abline(slope=0, intercept = 0) + scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) + theme_pubr() #+ coord_flip()
pdf(file= paste0("output/figs/",genes[i],"_plots.pdf"), paper="a4")
plot(p1)
plot(g)
plot(g2)
plot(p3)
dev.off()
}
test = tax_glom(ps1, "Species", NArm = FALSE)
test2 <- transform_sample_counts(test, fun = filterfun)
#Agglomerate all filtered OTUS by species level taxonomy, then create summary table and export
sum_spp_filt <- summarize_taxa(test, "Species", "SampleID")
sum_spp_filt <- spread(sum_spp_filt, key="SampleID", value="totalRA")
write.csv(sum_spp_filt, file = "output/csv/Glomprefilt_allgene_sppglom_filt_summarized.csv")
test2 = tax_glom(ps1, "Genus", NArm = FALSE)
test2 <- transform_sample_counts(test2, fun = filterfun)
sum_gen_filt <- summarize_taxa(test2, "Genus", "SampleID")
sum_gen_filt <- spread(sum_gen_filt, key="SampleID", value="totalRA")
write.csv(sum_gen_filt, file = "output/csv/Glomprefilt_allgene_genglom_filt_summarized.csv")
test = tax_glom(ps1, "Species", NArm = FALSE)
#Convert arthropod data to proportions and apply filter threshold
test <- transform_sample_counts(test, fun = filterfun)
test <- transform_sample_counts(test, fun = proportions)
test = filter_taxa(test, function(x) mean(x) > 0, TRUE) #Drop missing
#Agglomerate all filtered OTUS by species level taxonomy, then create summary table and export
sum_spp_filt <- summarize_taxa(test, "Species", "SampleID")
sum_spp_filt <- spread(sum_spp_filt, key="SampleID", value="totalRA")
write.csv(sum_spp_filt, file = "output/csv/Glomprefilt_allgene_sppglom_filt_summarized.csv")
test2 = tax_glom(ps1, "Genus", NArm = FALSE)
#Convert arthropod data to proportions and apply filter threshold
test2 <- transform_sample_counts(test2, fun = filterfun)
test2 <- transform_sample_counts(test2, fun = proportions)
test2 = filter_taxa(test, function(x) mean(x) > 0, TRUE) #Drop missing
test2 <- transform_sample_counts(test2, fun = filterfun)
sum_gen_filt <- summarize_taxa(test2, "Genus", "SampleID")
sum_gen_filt <- spread(sum_gen_filt, key="SampleID", value="totalRA")
write.csv(sum_gen_filt, file = "output/csv/Glomprefilt_allgene_genglom_filt_summarized.csv")
#get expected abundances
exp_seqtab <- as.matrix(read.csv("sample_data/expected/exp_seqtab.csv",row.names=1, header=TRUE))
exp_taxtab <- as.matrix(read.csv("sample_data/expected/exp_taxtab.csv",row.names=1, header=TRUE))
exp_samdf <- read.csv("sample_data/expected/exp_samdf.csv", header=TRUE)
keep.cols <- c("collection_date", "biome", "target_gene", "feature",
"pool_comp" ,"SampleID","experimental_factor")
rownames(exp_samdf) <- exp_samdf$SampleID
exp_samdf <- exp_samdf[rownames(exp_seqtab), keep.cols]
## Make phyloseq and merge
ps_exp <- phyloseq(tax_table(exp_taxtab), sample_data(exp_samdf),
otu_table(exp_seqtab, taxa_are_rows = FALSE))
#Figure 1 - Mock communities observed Vs Expected
rm_c1 <-  c("Pool-C1-250","Pool-C2-250","Pool-C3-250","Pool-C4-250","Pool-C5-250")
rm_c1_exp<- c("Pool-C1-250-exp","Pool-C2-250-exp","Pool-C3-250-exp","Pool-C4-250-exp","Pool-C5-250-exp")
#Expected
#Drop Kingdom column so we have 3 genes merged
tax_table(ps_exp) <- tax_table(ps_exp)[,2:7]
ps_exp <- subset_samples(ps_exp, biome == "Laboratory")
ps_exp <- subset_taxa(ps_exp, Phylum == "Arthropoda")
ps_exp <- subset_samples(ps_exp, sample_names(ps_exp)!=rm_c1_exp)
ps_exp = tax_glom(ps_exp, "Species", NArm = TRUE)
##Subset to mock communities
ps_exp = filter_taxa(ps_exp, function(x) mean(x) > 0, TRUE)
ps_exp <- transform_sample_counts(ps_exp, fun= proportions) # Reset scale to 1 following NArm
df_exp <- psmelt(ps_exp)
#Reorder to pool composition
df_exp$SampleID <- factor(df_exp$SampleID, levels = unique(df_exp$SampleID[order(-df_exp$pool_comp)]))
#Plot horizontal mock communities
pexp <- ggplot(df_exp, aes(x= SampleID, y=Abundance,fill= Genus)) +
geom_bar(stat = "identity", position = "stack", color = "NA")  +
theme_pubclean() +
theme(axis.text.x = element_text(angle = -90, hjust = 0),
plot.title=element_text(hjust = 0.5)) +
ggtitle(paste0("Expected")) +
scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) +
coord_flip()
## All genes merged
psmock <- psFR
#Drop Kingdom column so we have 3 genes merged
tax_table(psmock) <- tax_table(psmock)[,2:7]
psmock <- subset_samples(psmock, biome == "Laboratory")
psmock <- subset_taxa(psmock, Phylum == "Arthropoda")
rm_c1 <-  c("Pool-C1-250","Pool-C2-250","Pool-C3-250","Pool-C4-250","Pool-C5-250")
psmock <- subset_samples(psmock, sample_names(psmock)!=rm_c1)
psmock = tax_glom(psmock, "Species", NArm = TRUE)
##Subset to mock communities
psmock = filter_taxa(psmock, function(x) mean(x) > 0, TRUE)
psmock <- transform_sample_counts(psmock, fun= proportions) # Reset scale to 1 following NArm
df_mock <- psmelt(psmock)
#Reorder to pool composition
df_mock$SampleID <- factor(df_mock$SampleID, levels = unique(df_mock$SampleID[order(-df_mock$pool_comp)]))
#Plot horizontal mock communities
pmock <- ggplot(df_mock, aes(x= SampleID, y=Abundance,fill= Genus)) +
geom_bar(stat = "identity", position = "stack", color = "NA")  +
theme_pubclean() +
theme(axis.text.x = element_text(angle = -90, hjust = 0),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.title=element_text(hjust = 0.5),
legend.position = "none") +
ggtitle(paste0("3 Genes")) +
scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) +
coord_flip()
#COI
ps_coi <- subset_taxa(psFR, Gene == "COI-Eukaryota")
ps_coi <- subset_taxa(ps_coi, Phylum == "Arthropoda")
ps_coi = subset_samples(ps_coi, biome == "Laboratory")
ps_coi = tax_glom(ps_coi, "Species", NArm = TRUE)
tax_table(ps_coi) <- tax_table(ps_coi)[,2:7]
##Transform data to proportions and set low proportions to zero
psra_coi <- transform_sample_counts(ps_coi, fun = proportions)
psra_coi = filter_taxa(psra_coi, function(x) mean(x) > 0, TRUE)
#Remove combinatorial indexed samples
psra_coi <- subset_samples(psra_coi, sample_names(psra_coi)!=rm_c1)
psra_coi <- subset_samples(psra_coi, sample_names(psmock)!=rm_c1_exp)
df_coi <- psmelt(psra_coi)
#Reorder to pool composition
df_coi$SampleID <- factor(df_coi$SampleID, levels = unique(df_coi$SampleID[order(-df_coi$pool_comp)]))
#Plot COI mock communities
pcoi <- ggplot(df_coi, aes(x= SampleID, y=Abundance,fill= Genus)) +
geom_bar(stat = "identity", position = "stack", color = "NA")  +
theme_pubclean() +
theme(axis.text.x = element_text(angle = -90, hjust = 0),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.title=element_text(hjust = 0.5),
legend.position = "none") +
ggtitle(paste0("COI")) +
scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) +
coord_flip()
#18S
ps_18s <- subset_taxa(psFR, Gene == "18s-Eukaryota")
ps_18s <- subset_taxa(ps_18s, Phylum == "Arthropoda")
ps_18s = subset_samples(ps_18s, biome == "Laboratory")
ps_18s = tax_glom(ps_18s, "Species", NArm = TRUE)
tax_table(ps_18s) <- tax_table(ps_18s)[,2:7]
##Transform data to proportions and set low proportions to zero
psra_18s <- transform_sample_counts(ps_18s, fun = proportions)
psra_18s = filter_taxa(psra_18s, function(x) mean(x) > 0, TRUE)
#Remove combinatorial indexed samples
psra_18s <- subset_samples(psra_18s, sample_names(psra_18s)!=rm_c1)
psra_18s <- subset_samples(psra_18s, sample_names(psmock)!=rm_c1_exp)
df_18s <- psmelt(psra_18s)
#Reorder to pool composition
df_18s$SampleID <- factor(df_18s$SampleID, levels = unique(df_18s$SampleID[order(-df_18s$pool_comp)]))
#Plot 18S mock communities
p18s <- ggplot(df_18s, aes(x= SampleID, y=Abundance,fill= Genus)) +
geom_bar(stat = "identity", position = "stack", color = "NA")  +
theme_pubclean() +
theme(axis.text.x = element_text(angle = -90, hjust = 0),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.title=element_text(hjust = 0.5),
legend.position = "none") +
ggtitle(paste0("18S")) +
scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) +
coord_flip()
#12s
ps_12s <- subset_taxa(psFR, Gene == "12S-Eukaryota")
ps_12s <- subset_taxa(ps_12s, Phylum == "Arthropoda")
ps_12s = subset_samples(ps_12s, biome == "Laboratory")
ps_12s = tax_glom(ps_12s, "Species", NArm = TRUE)
tax_table(ps_12s) <- tax_table(ps_12s)[,2:7]
##Transform data to proportions and set low proportions to zero
psra_12s <- transform_sample_counts(ps_12s, fun = proportions)
psra_12s = filter_taxa(psra_12s, function(x) mean(x) > 0, TRUE)
#Remove combinatorial indexed samples
psra_12s <- subset_samples(psra_12s, sample_names(psra_12s)!=rm_c1)
psra_12s <- subset_samples(psra_12s, sample_names(psmock)!=rm_c1_exp)
df_12s <- psmelt(psra_12s)
#Reorder to pool composition
df_12s$SampleID <- factor(df_12s$SampleID, levels = unique(df_12s$SampleID[order(-df_12s$pool_comp)]))
#Plot 12s mock communities
p12s <- ggplot(df_12s, aes(x= SampleID, y=Abundance,fill= Genus)) +
geom_bar(stat = "identity", position = "stack", color = "NA")  +
theme_pubclean() +
theme(axis.text.x = element_text(angle = -90, hjust = 0),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.title=element_text(hjust = 0.5),
legend.position = "none") +
ggtitle(paste0("12s")) +
scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77")) +
coord_flip()
#Use patchwork to stich together
Fig1 <- pexp + pmock + pcoi + p18s + p12s + plot_layout(ncol = 5)
Fig1
ps <- readRDS("output/rds/ps_rdp.rds")
dir.create("output/csv")
dir.create("output/csv/unfiltered/")
dir.create("output/csv/filtered/")
dir.create("output/csv/seperategenes/")
##Define helper functions
#Function to transform data to proportions
proportions = function(x){
xprop = (x / sum(x))
return(xprop)
}
##Function to transform data to proportions and set low proportions to zero
filterfun = function(x){
xprop = (x / sum(x)) #Convert to proportions
xprop[xprop < (0.00011664)] <- 0 ## remove taxa under this level - Derived from the index switching rate from 100/500/1000 pool run
return(xprop)
}
##Export raw csv
export <- psmelt(ps)
write.csv(export, file = "output/csv/unfiltered/rawdata.csv")
#Agglomerate all OTU's to Gene level and export proportions - For supplementary table
sum_gene <- transform_sample_counts(ps, fun = proportions)
sum_gene <- summarize_taxa(sum_gene, "Gene", "SampleID")
sum_gene <- spread(sum_gene, key="SampleID", value="totalRA")
write.csv(sum_gene, file = "output/csv/unfiltered/gene_summarized.csv")
#Subset data to Athropoda only & Export CSV
ps1 = subset_taxa(ps, Phylum == "Arthropoda")
export <- psmelt(ps1)
write.csv(export, file = "output/csv/unfiltered/raw_arthropoda.csv")
#Agglomerate all OTUS and export summary table pre-filtering (for index switching figure)
sum_spp <- summarize_taxa(ps1, "Species", "SampleID")
sum_spp <- spread(sum_spp, key="SampleID", value="totalRA")
write.csv(sum_spp, file = "output/csv/unfiltered/allgene_sppglom_unfiltered_summarized.csv")
sum_gen <- summarize_taxa(ps1, "Genus", "SampleID")
sum_gen <- spread(sum_gen, key="SampleID", value="totalRA")
write.csv(sum_gen, file = "output/csv/unfiltered/allgene_genglom_unfiltered_summarized.csv")
#Convert arthropod data to proportions and apply filter threshold
psFR <- transform_sample_counts(ps1, fun = filterfun)
psFR <- transform_sample_counts(psFR, fun = proportions)
psFR = filter_taxa(psFR, function(x) mean(x) > 0, TRUE) #Drop missing
##Export filtered data
export <- psmelt(psFR)
write.csv(export, file = "output/csv/filtered/allgene_arthropoda_filt.csv")
#Agglomerate all filtered OTUS by species & Genus level taxonomy and export
rm_c1 <-  c("Pool-C1-250","Pool-C2-250","Pool-C3-250","Pool-C4-250","Pool-C5-250")
spp_level <- subset_samples(psFR, sample_names(psFR)!=rm_c1)
spp_level = tax_glom(spp_level, "Species", NArm = FALSE)
sppexport <- psmelt(spp_level)
write.csv(sppexport, file = "output/csv/filtered/allgene_sppglom_filt.csv")
gen_level <- subset_samples(psFR, sample_names(psFR)!=rm_c1)
gen_level = tax_glom(gen_level, "Genus", NArm = FALSE)
genexport <- psmelt(gen_level)
write.csv(genexport, file = "output/csv/filtered/allgene_genglom_filt.csv")
#Agglomerate all filtered OTUS by species level taxonomy, then create summary table and export
sum_spp_filt <- summarize_taxa(psFR, "Species", "SampleID")
sum_spp_filt <- spread(sum_spp_filt, key="SampleID", value="totalRA")
write.csv(sum_spp_filt, file = "output/csv/filtered/allgene_sppglom_filt_summarized.csv")
sum_gen_filt <- summarize_taxa(psFR, "Genus", "SampleID")
sum_gen_filt <- spread(sum_gen_filt, key="SampleID", value="totalRA")
write.csv(sum_gen_filt, file = "output/csv/filtered/allgene_genglom_filt_summarized.csv")
##Write out data for each gene
for (i in seq(along=genes)){
print(genes[i])
ps_gene = subset_taxa(psFR, Gene == genes[i])
tax_table(ps_gene) <- tax_table(ps_gene)[,2:7]
#Summary export
sp_summary <- summarize_taxa(ps_gene, "Species", "SampleID")
sp_summary <- spread(sp_summary, key="SampleID", value="totalRA")
write.csv(sp_summary, file = paste0("output/csv/seperategenes/",genes[i],"_sppglom_filt_summarized.csv"))
gen_summary <- summarize_taxa(ps_gene, "Genus", "SampleID")
gen_summary <- spread(gen_summary, key="SampleID", value="totalRA")
write.csv(gen_summary, file = paste0("output/csv/seperategenes/",genes[i],"_genglom_filt_summarized.csv"))
}
version(phyloseq)
packageVersion("dada2")
packageVersion("ggplot2")
packageVersion("phyloseq")
packageVersion("bold")
packageVersion("rentrez")
packageVersion("taxonomizr")
citation("taxonomizr")
citation("NeatMap")
library(neatmap)
