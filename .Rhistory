exp_samdf <- exp_samdf[rownames(exp_seqtab), keep.cols]
## Make phyloseq and merge
ps_exp <- phyloseq(tax_table(exp_taxtab), sample_data(exp_samdf),
otu_table(exp_seqtab, taxa_are_rows = FALSE))
dir.create("output/figs")
positions = c('Pool-01-100', 'Pool-02-100', 'Pool-03-100', 'Pool-04-100', 'Pool-05-100', 'Pool-06-500', 'Pool-07-500', 'Pool-08-500', 'Pool-09-500', 'Pool-10-500', 'Pool-11-1000', 'Pool-12-1000', 'Pool-13-1000', 'Pool-14-1000', 'Pool-15-1000', 'Pool-U1-250', 'Pool-U2-250', 'Pool-U3-250', 'Pool-U4-250', 'Pool-U5-250', 'Trap-01', 'Trap-02', 'Trap-03', 'Trap-04', 'Trap-05', 'Trap-06', 'Trap-07', 'Trap-08', 'Trap-09', 'Trap-10')
positions_exp = c('Pool-01-100','Pool-01-100-exp',  'Pool-02-100','Pool-02-100-exp', 'Pool-03-100','Pool-03-100-exp', 'Pool-04-100','Pool-04-100-exp', 'Pool-05-100','Pool-05-100-exp', 'Pool-U1-250','Pool-U1-250-exp', 'Pool-U2-250','Pool-U2-250-exp', 'Pool-U3-250','Pool-U3-250-exp', 'Pool-U4-250','Pool-U4-250-exp', 'Pool-U5-250','Pool-U5-250-exp', 'Pool-06-500','Pool-06-500-exp', 'Pool-07-500','Pool-07-500-exp', 'Pool-08-500','Pool-08-500-exp', 'Pool-09-500','Pool-09-500-exp', 'Pool-10-500','Pool-10-500-exp', 'Pool-11-1000','Pool-11-1000-exp', 'Pool-12-1000','Pool-12-1000-exp', 'Pool-13-1000','Pool-13-1000-exp', 'Pool-14-1000','Pool-14-1000-exp', 'Pool-15-1000','Pool-15-1000-exp')
#Merge in expecteds
pstemp <- merge_phyloseq(psFR, ps_exp)
pstemp <- transform_sample_counts(pstemp, fun = proportions)
#pstemp = filter_taxa(pstemp, function(x) mean(x) > 0, TRUE) #Drop missing
#Drop Kingdom column so we have 3 genes merged
tax_table(pstemp) <- tax_table(pstemp)[,2:7]
##Subset to mock communities
psmock = subset_samples(pstemp, biome == "Laboratory")
psmock = filter_taxa(psmock, function(x) mean(x) > 0, TRUE)
rm_c1 <-  c("Pool-C1-250","Pool-C2-250","Pool-C3-250","Pool-C4-250","Pool-C5-250")
psmock <- subset_samples(psmock, sample_names(psmock)!=rm_c1)
rm_c1_exp<- c("Pool-C1-250-exp","Pool-C2-250-exp","Pool-C3-250-exp","Pool-C4-250-exp","Pool-C5-250-exp")
psmock <- subset_samples(psmock, sample_names(psmock)!=rm_c1_exp)
psmock = tax_glom(psmock, "Species", NArm = TRUE)
psmock <- transform_sample_counts(psmock, fun= proportions) # Reset scale to 1 following NArm
mdf <- psmelt(psmock)
#Reorder to pool composition
mdf$SampleID <- factor(mdf$SampleID, levels = unique(mdf$SampleID[order(-mdf$pool_comp)]))
#Plot horizontal mock communities
p <- ggplot(mdf, aes(x= SampleID, y=Abundance,fill= Genus))
p = p + geom_bar(stat = "identity", position = "stack", color = "NA")
p = p + theme(axis.text.x = element_text(angle = -90, hjust = 0))
p = p + ggtitle(paste0("Relative abundance of taxa for all genes in mock communities"))
p = p + xlab("Mock Community")
#p = p + scale_fill_viridis(discrete = TRUE)
p = p + scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77"))
p = p + theme_pubclean()
p1 =  p + scale_x_discrete(limits = positions_exp) + coord_flip()
#plot obs/exp seperated 2 cols
p2 = p + facet_wrap(.~experimental_factor, drop=TRUE, scales="free")  + coord_flip() #+ theme(axis.text.y = element_blank(), axis.ticks.y=element_blank())
#plot obs/exp seperated 2 rows
p3 = p + facet_wrap(~experimental_factor, nrow=2,ncol=1,drop=TRUE, scales="free") + coord_flip()
psreal = subset_samples(pstemp, experimental_factor != "Exp")
psreal <- subset_samples(psreal, sample_names(psreal)!=rm_c1)
psglom = tax_glom(psreal, "Species", NArm = TRUE)
psglom <- transform_sample_counts(psglom, fun= proportions) # Reset scale to 1 following NArm
psglom = filter_taxa(psglom, function(x) mean(x) > 0, TRUE)
p4 <- plot_heatmap(psglom, "NMDS", "bray", taxa.label="Species", taxa.order="Family") + theme_pubr()  + scale_x_discrete(limits = positions) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank(),legend.position="none") + scale_fill_viridis(trans=log_trans(10), na.value="grey10")
##Presence absense for each gene
mdt = fast_melt(psglom)
# Add the variable indicated in `GroupBy`, if provided.
sdt = data.table(SampleID = sample_names(psFR),
var1 = get_variable(psFR, "SampleID"))
setnames(sdt, "var1", "SampleID")
# Join
setkey(sdt, SampleID)
setkey(mdt, SampleID)
mdt <- sdt[mdt]
# Summarize
summarydt = mdt[, list(totalRA = sum(RelativeAbundance)),
by = c("Gene","Order","Family", "Genus","Species", "SampleID", "taxaID")]
dir.create("output/figs")
positions = c('Pool-01-100', 'Pool-02-100', 'Pool-03-100', 'Pool-04-100', 'Pool-05-100', 'Pool-06-500', 'Pool-07-500', 'Pool-08-500', 'Pool-09-500', 'Pool-10-500', 'Pool-11-1000', 'Pool-12-1000', 'Pool-13-1000', 'Pool-14-1000', 'Pool-15-1000', 'Pool-U1-250', 'Pool-U2-250', 'Pool-U3-250', 'Pool-U4-250', 'Pool-U5-250', 'Trap-01', 'Trap-02', 'Trap-03', 'Trap-04', 'Trap-05', 'Trap-06', 'Trap-07', 'Trap-08', 'Trap-09', 'Trap-10')
positions_exp = c('Pool-01-100','Pool-01-100-exp',  'Pool-02-100','Pool-02-100-exp', 'Pool-03-100','Pool-03-100-exp', 'Pool-04-100','Pool-04-100-exp', 'Pool-05-100','Pool-05-100-exp', 'Pool-U1-250','Pool-U1-250-exp', 'Pool-U2-250','Pool-U2-250-exp', 'Pool-U3-250','Pool-U3-250-exp', 'Pool-U4-250','Pool-U4-250-exp', 'Pool-U5-250','Pool-U5-250-exp', 'Pool-06-500','Pool-06-500-exp', 'Pool-07-500','Pool-07-500-exp', 'Pool-08-500','Pool-08-500-exp', 'Pool-09-500','Pool-09-500-exp', 'Pool-10-500','Pool-10-500-exp', 'Pool-11-1000','Pool-11-1000-exp', 'Pool-12-1000','Pool-12-1000-exp', 'Pool-13-1000','Pool-13-1000-exp', 'Pool-14-1000','Pool-14-1000-exp', 'Pool-15-1000','Pool-15-1000-exp')
#Merge in expecteds
pstemp <- merge_phyloseq(psFR, ps_exp)
pstemp <- transform_sample_counts(pstemp, fun = proportions)
#pstemp = filter_taxa(pstemp, function(x) mean(x) > 0, TRUE) #Drop missing
#Drop Kingdom column so we have 3 genes merged
tax_table(pstemp) <- tax_table(pstemp)[,2:7]
##Subset to mock communities
psmock = subset_samples(pstemp, biome == "Laboratory")
psmock = filter_taxa(psmock, function(x) mean(x) > 0, TRUE)
rm_c1 <-  c("Pool-C1-250","Pool-C2-250","Pool-C3-250","Pool-C4-250","Pool-C5-250")
psmock <- subset_samples(psmock, sample_names(psmock)!=rm_c1)
rm_c1_exp<- c("Pool-C1-250-exp","Pool-C2-250-exp","Pool-C3-250-exp","Pool-C4-250-exp","Pool-C5-250-exp")
psmock <- subset_samples(psmock, sample_names(psmock)!=rm_c1_exp)
psmock = tax_glom(psmock, "Species", NArm = TRUE)
psmock <- transform_sample_counts(psmock, fun= proportions) # Reset scale to 1 following NArm
mdf <- psmelt(psmock)
#Reorder to pool composition
mdf$SampleID <- factor(mdf$SampleID, levels = unique(mdf$SampleID[order(-mdf$pool_comp)]))
#Plot horizontal mock communities
p <- ggplot(mdf, aes(x= SampleID, y=Abundance,fill= Genus))
p = p + geom_bar(stat = "identity", position = "stack", color = "NA")
p = p + theme(axis.text.x = element_text(angle = -90, hjust = 0))
p = p + ggtitle(paste0("Relative abundance of taxa for all genes in mock communities"))
p = p + xlab("Mock Community")
#p = p + scale_fill_viridis(discrete = TRUE)
p = p + scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77"))
p = p + theme_pubclean()
p1 =  p + scale_x_discrete(limits = positions_exp) + coord_flip()
#plot obs/exp seperated 2 cols
p2 = p + facet_wrap(.~experimental_factor, drop=TRUE, scales="free")  + coord_flip() #+ theme(axis.text.y = element_blank(), axis.ticks.y=element_blank())
#plot obs/exp seperated 2 rows
p3 = p + facet_wrap(~experimental_factor, nrow=2,ncol=1,drop=TRUE, scales="free") + coord_flip()
psreal = subset_samples(pstemp, experimental_factor != "Exp")
psreal <- subset_samples(psreal, sample_names(psreal)!=rm_c1)
psglom = tax_glom(psreal, "Species", NArm = TRUE)
psglom <- transform_sample_counts(psglom, fun= proportions) # Reset scale to 1 following NArm
psglom = filter_taxa(psglom, function(x) mean(x) > 0, TRUE)
p4 <- plot_heatmap(psglom, "NMDS", "bray", taxa.label="Species", taxa.order="Family") + theme_pubr()  + scale_x_discrete(limits = positions) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank(),legend.position="none") + scale_fill_viridis(trans=log_trans(10), na.value="grey10")
##Presence absense for each gene
mdt = fast_melt(psglom)
# Add the variable indicated in `GroupBy`, if provided.
sdt = data.table(SampleID = sample_names(mdt),
var1 = get_variable(mdt, "SampleID"))
##Presence absense for each gene
mdt = fast_melt(psglom)
# Add the variable indicated in `GroupBy`, if provided.
sdt = data.table(SampleID = sample_names(psglom),
var1 = get_variable(psglom, "SampleID"))
setnames(sdt, "var1", "SampleID")
# Join
setkey(sdt, SampleID)
setkey(mdt, SampleID)
mdt <- sdt[mdt]
# Summarize
summarydt = mdt[, list(totalRA = sum(RelativeAbundance)),
by = c("Gene","Order","Family", "Genus","Species", "SampleID", "taxaID")]
View(ps)
colnames(tax_table(ps))
##Presence absense for each gene
mdt = fast_melt(psglom)
# Add the variable indicated in `GroupBy`, if provided.
sdt = data.table(SampleID = sample_names(psglom),
var1 = get_variable(psglom, "SampleID"))
setnames(sdt, "var1", "SampleID")
# Join
setkey(sdt, SampleID)
setkey(mdt, SampleID)
mdt <- sdt[mdt]
# Summarize
summarydt = mdt[, list(totalRA = sum(RelativeAbundance)),
by = c("Phylum","Order","Family", "Genus","Species", "SampleID", "taxaID")]
summarydt <- summarydt[!is.na(summarydt$Species)]
summarydt$totalRA[summarydt$totalRA > 0] <- 1
summarydt$totalRA <- replace(summarydt$totalRA,summarydt > 0, 1)
#Attempt rearragning
rankcol = which(rank_names(psglom) %in% "Family")
taxmat = as(tax_table(psglom)[, 1:rankcol], "matrix")
taxa.order = apply(taxmat, 1, paste, sep = "", collapse = "")
names(taxa.order) <- taxa_names(psglom)
taxa.order = as.tibble(names(sort(taxa.order, na.last = TRUE)))
colnames(taxa.order) <- "taxaID"
mdt = fast_melt(psglom)
# Add the variable indicated in `GroupBy`, if provided.
sdt = data.table(SampleID = sample_names(psglom),
var1 = get_variable(psglom, "SampleID"))
setnames(sdt, "var1", "SampleID")
# Join
setkey(sdt, SampleID)
setkey(mdt, SampleID)
mdt <- sdt[mdt]
# Summarize
summarydt = mdt[, list(totalRA = sum(RelativeAbundance)),
by = c("Phylum","Order","Family", "Genus","Species", "SampleID", "taxaID")]
summarydt <- summarydt[!is.na(summarydt$Species)]
summarydt$totalRA[summarydt$totalRA > 0] <- 1
summarydt$totalRA <- replace(summarydt$totalRA,summarydt > 0, 1)
#Attempt rearragning
rankcol = which(rank_names(psglom) %in% "Family")
taxmat = as(tax_table(psglom)[, 1:rankcol], "matrix")
taxa.order = apply(taxmat, 1, paste, sep = "", collapse = "")
names(taxa.order) <- taxa_names(psglom)
taxa.order = as.tibble(names(sort(taxa.order, na.last = TRUE)))
colnames(taxa.order) <- "taxaID"
taxa.order$seq <- seq(1:nrow(taxa.order))
reorder <- full_join(taxa.order,summarydt,by="taxaID") %>%
drop_na()
reorder$Species <- factor(reorder$Species, levels = unique(reorder$Species[order(reorder$seq)]))
p5 <- ggplot(reorder, aes(Gene, Species)) + geom_point(aes(colour = Gene),size=4) + theme_void() + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank())
p5
psglom2 = tax_glom(psFR, "Species", NArm = TRUE)
psglom2 <- transform_sample_counts(psglom2, fun= proportions) # Reset scale to 1 following NArm
mdt = fast_melt(psglom2)
# Add the variable indicated in `GroupBy`, if provided.
sdt = data.table(SampleID = sample_names(psglom2),
var1 = get_variable(psglom2, "SampleID"))
setnames(sdt, "var1", "SampleID")
# Join
setkey(sdt, SampleID)
setkey(mdt, SampleID)
mdt <- sdt[mdt]
# Summarize
summarydt = mdt[, list(totalRA = sum(RelativeAbundance)),
by = c("Gene","Order","Family", "Genus","Species", "SampleID", "taxaID")]
summarydt <- summarydt[!is.na(summarydt$Species)]
summarydt$totalRA[summarydt$totalRA > 0] <- 1
summarydt$totalRA <- replace(summarydt$totalRA,summarydt > 0, 1)
#Attempt rearragning
rankcol = which(rank_names(psglom) %in% "Family")
taxmat = as(tax_table(psglom)[, 1:rankcol], "matrix")
taxa.order = apply(taxmat, 1, paste, sep = "", collapse = "")
names(taxa.order) <- taxa_names(psglom)
taxa.order = as.tibble(names(sort(taxa.order, na.last = TRUE)))
colnames(taxa.order) <- "taxaID"
taxa.order$seq <- seq(1:nrow(taxa.order))
reorder <- full_join(taxa.order,summarydt,by="taxaID") %>%
drop_na()
reorder$Species <- factor(reorder$Species, levels = unique(reorder$Species[order(reorder$seq)]))
p5 <- ggplot(reorder, aes(Gene, Species)) + geom_point(aes(colour = Gene),size=4) + theme_void() + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank())
p5
mdt = fast_melt(psFR)
# Add the variable indicated in `GroupBy`, if provided.
sdt = data.table(SampleID = sample_names(psFR),
var1 = get_variable(psFR, "SampleID"))
setnames(sdt, "var1", "SampleID")
# Join
setkey(sdt, SampleID)
setkey(mdt, SampleID)
mdt <- sdt[mdt]
# Summarize
summarydt = mdt[, list(totalRA = sum(RelativeAbundance)),
by = c("Gene","Order","Family", "Genus","Species", "SampleID", "taxaID")]
summarydt <- summarydt[!is.na(summarydt$Species)]
summarydt$totalRA[summarydt$totalRA > 0] <- 1
summarydt$totalRA <- replace(summarydt$totalRA,summarydt > 0, 1)
#Attempt rearragning
rankcol = which(rank_names(psglom) %in% "Family")
taxmat = as(tax_table(psglom)[, 1:rankcol], "matrix")
taxa.order = apply(taxmat, 1, paste, sep = "", collapse = "")
names(taxa.order) <- taxa_names(psglom)
taxa.order = as.tibble(names(sort(taxa.order, na.last = TRUE)))
colnames(taxa.order) <- "taxaID"
taxa.order$seq <- seq(1:nrow(taxa.order))
reorder <- full_join(taxa.order,summarydt,by="taxaID") %>%
drop_na()
reorder$Species <- factor(reorder$Species, levels = unique(reorder$Species[order(reorder$seq)]))
p5 <- ggplot(reorder, aes(Gene, Species)) + geom_point(aes(colour = Gene),size=4) + theme_void() + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank())
p6
p5
p5 <- ggplot(reorder, aes(Gene, Species)) + geom_tile(aes(colour = Gene),size=4) + theme_void() + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank())
p5
p5 <- ggplot(reorder, aes(Gene, Species)) + geom_point(aes(colour = Gene),size=4) + theme_void() + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank())
##Presence absense for each gene - Might need to glom psfr and do with that?
#psglom2 = tax_glom(psFR, "Species", NArm = TRUE)
#psglom2 <- transform_sample_counts(psglom2, fun= proportions) # Reset scale to 1 following NArm
mdt = fast_melt(psFR)
View(mdt)
# Add the variable indicated in `GroupBy`, if provided.
sdt = data.table(SampleID = sample_names(psFR),
var1 = get_variable(psFR, "SampleID"))
setnames(sdt, "var1", "SampleID")
View(sdt)
?setnames
# Join
setkey(sdt, SampleID)
setkey(mdt, SampleID)
mdt <- sdt[mdt]
View(mdt)
##Presence absense for each gene - Might need to glom psfr and do with that?
#psglom2 = tax_glom(psFR, "Species", NArm = TRUE)
#psglom2 <- transform_sample_counts(psglom2, fun= proportions) # Reset scale to 1 following NArm
mdt = fast_melt(psFR)
# Add the variable indicated in `GroupBy`, if provided.
sdt = data.table(SampleID = sample_names(psFR),
var1 = get_variable(psFR, "SampleID"))
setnames(sdt, "var1", "SampleID")
# Join
setkey(sdt, SampleID)
setkey(mdt, SampleID)
mdt2 <- sdt[mdt]
View(mdt2)
# Summarize
summarydt = mdt[, list(totalRA = sum(RelativeAbundance)),
by = c("Gene","Order","Family", "Genus","Species", "SampleID", "taxaID")]
View(summarydt)
summarydt <- summarydt[!is.na(summarydt$Species)]
summarydt$totalRA[summarydt$totalRA > 0] <- 1
summarydt$totalRA <- replace(summarydt$totalRA,summarydt > 0, 1)
#psglom2 <- transform_sample_counts(psglom2, fun= proportions) # Reset scale to 1 following NArm
mdt = fast_melt(psFR)
# Add the variable indicated in `GroupBy`, if provided.
#    sdt = data.table(SampleID = sample_names(psFR),
#                     var1 = get_variable(psFR, "SampleID"))
#    setnames(sdt, "var1", "SampleID")
#    # Join
#    setkey(sdt, SampleID)
#    setkey(mdt, SampleID)
#    mdt2 <- sdt[mdt]
# Summarize
summarydt = mdt[, list(totalRA = sum(RelativeAbundance)),
by = c("Gene","Order","Family", "Genus","Species", "SampleID", "taxaID")]
summarydt <- summarydt[!is.na(summarydt$Species)]
summarydt$totalRA[summarydt$totalRA > 0] <- 1
View(summarydt)
p5 <- ggplot(summarydt, aes(Gene, Species)) + geom_point(aes(colour = Gene),size=4) + theme_void() + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank())
p5
rankcol = which(rank_names(psglom) %in% "Family")
taxmat = as(tax_table(psglom)[, 1:rankcol], "matrix")
taxa.order = apply(taxmat, 1, paste, sep = "", collapse = "")
names(taxa.order) <- taxa_names(psglom)
taxa.order = as.tibble(names(sort(taxa.order, na.last = TRUE)))
colnames(taxa.order) <- "taxaID"
taxa.order$seq <- seq(1:nrow(taxa.order))
reorder <- full_join(taxa.order,summarydt,by="taxaID") %>%
drop_na()
p5 <- ggplot(summarydt, aes(Gene, Species)) + geom_point(aes(colour = Gene),size=4) + theme_void() + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank())
p5
p5 <- ggplot(reorder, aes(Gene, Species)) + geom_point(aes(colour = Gene),size=4) + theme_void() + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank())
p5
rankcol = which(rank_names(psFR) %in% "Family")
taxmat = as(tax_table(psFR)[, 1:rankcol], "matrix")
taxa.order = apply(taxmat, 1, paste, sep = "", collapse = "")
names(taxa.order) <- taxa_names(psFR)
taxa.order = as.tibble(names(sort(taxa.order, na.last = TRUE)))
colnames(taxa.order) <- "taxaID"
taxa.order$seq <- seq(1:nrow(taxa.order))
reorder <- full_join(taxa.order,summarydt,by="taxaID") %>%
drop_na()
reorder$Species <- factor(reorder$Species, levels = unique(reorder$Species[order(reorder$seq)]))
p5 <- ggplot(reorder, aes(Gene, Species)) + geom_point(aes(colour = Gene),size=4) + theme_void() + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank())
p5
#Attempt rearragning  - Losing the duplicates Here!
rankcol = which(rank_names(psglom) %in% "Family")
taxmat = as(tax_table(psglom)[, 1:rankcol], "matrix")
taxa.order = apply(taxmat, 1, paste, sep = "", collapse = "")
names(taxa.order) <- taxa_names(psglom)
taxa.order = as.tibble(names(sort(taxa.order, na.last = TRUE)))
colnames(taxa.order) <- "taxaID"
taxa.order$seq <- seq(1:nrow(taxa.order))
reorder <- full_join(taxa.order,summarydt,by="taxaID") %>%
drop_na()
reorder$Species <- factor(reorder$Species, levels = unique(reorder$Species[order(reorder$seq)]))
p5 <- ggplot(reorder, aes(Gene, Species)) + geom_point(aes(colour = Gene),size=4) + theme_void() + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank())
p6
p5
rankcol = which(rank_names(psglom) %in% "Family")
taxmat = as(tax_table(psglom)[, 1:rankcol], "matrix")
taxa.order = apply(taxmat, 1, paste, sep = "", collapse = "")
names(taxa.order) <- taxa_names(psglom)
taxa.order = as.tibble(names(sort(taxa.order, na.last = TRUE)))
colnames(taxa.order) <- "taxaID"
taxa.order$seq <- seq(1:nrow(taxa.order))
reorder <- full_join(taxa.order,summarydt,by="taxaID")
#%>%    drop_na()
reorder$Species <- factor(reorder$Species, levels = unique(reorder$Species[order(reorder$seq)]))
p5 <- ggplot(reorder, aes(Gene, Species)) + geom_point(aes(colour = Gene),size=4) + theme_void() + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank())
p5
p5
#Attempt rearragning  - Losing the duplicates Here!
rankcol = which(rank_names(psglom) %in% "Family")
taxmat = as(tax_table(psglom)[, 1:rankcol], "matrix")
taxa.order = apply(taxmat, 1, paste, sep = "", collapse = "")
names(taxa.order) <- taxa_names(psglom)
taxa.order = as.tibble(names(sort(taxa.order, na.last = TRUE)))
colnames(taxa.order) <- "taxaID"
taxa.order$seq <- seq(1:nrow(taxa.order))
reorder <- full_join(taxa.order,summarydt,by="taxaID") %>%
drop_na()
reorder$Species <- factor(reorder$Species, levels = unique(reorder$Species[order(reorder$seq)]))
p5 <- ggplot(reorder, aes(Gene, Species)) + geom_point(aes(colour = Gene),size=4) + theme_void() + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank())
p5
#Attempt rearragning  - Losing the duplicates Here!
rankcol = which(rank_names(psglom) %in% "Family")
taxmat = as(tax_table(psglom)[, 1:rankcol], "matrix")
taxa.order = apply(taxmat, 1, paste, sep = "", collapse = "")
names(taxa.order) <- taxa_names(psglom)
taxa.order = as.tibble(names(sort(taxa.order, na.last = TRUE)))
colnames(taxa.order) <- "taxaID"
taxa.order$seq <- seq(1:nrow(taxa.order))
reorder <- full_join(taxa.order,summarydt,by="taxaID")
reorder$Species <- factor(reorder$Species, levels = unique(reorder$Species[order(reorder$seq)]))
p5 <- ggplot(reorder, aes(Gene, Species)) + geom_point(aes(colour = Gene),size=4) + theme_void() + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank())
p5
ggarrange(p4,p5,nrow=1,ncol=2,widths = c(5,1),align="h")
ggarrange(p4,p5,nrow=1,ncol=2,widths = c(5,1),align="h")
dir.create("output/figs")
positions = c('Pool-01-100', 'Pool-02-100', 'Pool-03-100', 'Pool-04-100', 'Pool-05-100', 'Pool-06-500', 'Pool-07-500', 'Pool-08-500', 'Pool-09-500', 'Pool-10-500', 'Pool-11-1000', 'Pool-12-1000', 'Pool-13-1000', 'Pool-14-1000', 'Pool-15-1000', 'Pool-U1-250', 'Pool-U2-250', 'Pool-U3-250', 'Pool-U4-250', 'Pool-U5-250', 'Trap-01', 'Trap-02', 'Trap-03', 'Trap-04', 'Trap-05', 'Trap-06', 'Trap-07', 'Trap-08', 'Trap-09', 'Trap-10')
positions_exp = c('Pool-01-100','Pool-01-100-exp',  'Pool-02-100','Pool-02-100-exp', 'Pool-03-100','Pool-03-100-exp', 'Pool-04-100','Pool-04-100-exp', 'Pool-05-100','Pool-05-100-exp', 'Pool-U1-250','Pool-U1-250-exp', 'Pool-U2-250','Pool-U2-250-exp', 'Pool-U3-250','Pool-U3-250-exp', 'Pool-U4-250','Pool-U4-250-exp', 'Pool-U5-250','Pool-U5-250-exp', 'Pool-06-500','Pool-06-500-exp', 'Pool-07-500','Pool-07-500-exp', 'Pool-08-500','Pool-08-500-exp', 'Pool-09-500','Pool-09-500-exp', 'Pool-10-500','Pool-10-500-exp', 'Pool-11-1000','Pool-11-1000-exp', 'Pool-12-1000','Pool-12-1000-exp', 'Pool-13-1000','Pool-13-1000-exp', 'Pool-14-1000','Pool-14-1000-exp', 'Pool-15-1000','Pool-15-1000-exp')
#Merge in expecteds
pstemp <- merge_phyloseq(psFR, ps_exp)
pstemp <- transform_sample_counts(pstemp, fun = proportions)
#pstemp = filter_taxa(pstemp, function(x) mean(x) > 0, TRUE) #Drop missing
#Drop Kingdom column so we have 3 genes merged
tax_table(pstemp) <- tax_table(pstemp)[,2:7]
##Subset to mock communities
psmock = subset_samples(pstemp, biome == "Laboratory")
psmock = filter_taxa(psmock, function(x) mean(x) > 0, TRUE)
rm_c1 <-  c("Pool-C1-250","Pool-C2-250","Pool-C3-250","Pool-C4-250","Pool-C5-250")
psmock <- subset_samples(psmock, sample_names(psmock)!=rm_c1)
rm_c1_exp<- c("Pool-C1-250-exp","Pool-C2-250-exp","Pool-C3-250-exp","Pool-C4-250-exp","Pool-C5-250-exp")
psmock <- subset_samples(psmock, sample_names(psmock)!=rm_c1_exp)
psmock = tax_glom(psmock, "Species", NArm = TRUE)
psmock <- transform_sample_counts(psmock, fun= proportions) # Reset scale to 1 following NArm
mdf <- psmelt(psmock)
#Reorder to pool composition
mdf$SampleID <- factor(mdf$SampleID, levels = unique(mdf$SampleID[order(-mdf$pool_comp)]))
#Plot horizontal mock communities
p <- ggplot(mdf, aes(x= SampleID, y=Abundance,fill= Genus))
p = p + geom_bar(stat = "identity", position = "stack", color = "NA")
p = p + theme(axis.text.x = element_text(angle = -90, hjust = 0))
p = p + ggtitle(paste0("Relative abundance of taxa for all genes in mock communities"))
p = p + xlab("Mock Community")
#p = p + scale_fill_viridis(discrete = TRUE)
p = p + scale_fill_manual(values=c("#0c4687","#ae0707","#fa6e24","#3a9e82","#95cf77"))
p = p + theme_pubclean()
p1 =  p + scale_x_discrete(limits = positions_exp) + coord_flip()
#plot obs/exp seperated 2 cols
p2 = p + facet_wrap(.~experimental_factor, drop=TRUE, scales="free")  + coord_flip() #+ theme(axis.text.y = element_blank(), axis.ticks.y=element_blank())
#plot obs/exp seperated 2 rows
p3 = p + facet_wrap(~experimental_factor, nrow=2,ncol=1,drop=TRUE, scales="free") + coord_flip()
#Merge in expecteds
psreal <- subset_samples(pstemp, experimental_factor != "Exp")
psreal <- subset_samples(psreal, sample_names(psreal)!=rm_c1)
psglom = tax_glom(psreal, "Species", NArm = TRUE)
psglom <- transform_sample_counts(psglom, fun= proportions) # Reset scale to 1 following NArm
psglom = filter_taxa(psglom, function(x) mean(x) > 0, TRUE)
p4 <- plot_heatmap(psglom, "NMDS", "bray", taxa.label="Species", taxa.order="Family") + theme_pubr()  + scale_x_discrete(limits = positions) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank(),legend.position="none") + scale_fill_viridis(trans=log_trans(10), na.value="grey10")
##Presence absense for each gene
mdt = fast_melt(psFR)
summarydt = mdt[, list(totalRA = sum(RelativeAbundance)),
by = c("Gene","Order","Family", "Genus","Species", "SampleID", "taxaID")]
summarydt <- summarydt[!is.na(summarydt$Species)]
summarydt$totalRA[summarydt$totalRA > 0] <- 1
#Attempt rearragning  - Losing the duplicates Here!
rankcol = which(rank_names(psglom) %in% "Family")
taxmat = as(tax_table(psglom)[, 1:rankcol], "matrix")
taxa.order = apply(taxmat, 1, paste, sep = "", collapse = "")
names(taxa.order) <- taxa_names(psglom)
taxa.order = as.tibble(names(sort(taxa.order, na.last = TRUE)))
colnames(taxa.order) <- "taxaID"
taxa.order$seq <- seq(1:nrow(taxa.order))
reorder <- full_join(taxa.order,summarydt,by="taxaID")
reorder$Species <- factor(reorder$Species, levels = unique(reorder$Species[order(reorder$seq)]))
p5 <- ggplot(reorder, aes(Gene, Species)) + geom_point(aes(colour = Gene),size=4) + theme_void() + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank())
#Save plots to file
pdf(file= "output/figs/allgenes_plots.pdf", paper="a4")
plot(p1)
plot(p2)
plot(p3)
plot(p4)
plot(ggarrange(p4,p5,nrow=1,ncol=2,widths = c(5,1),align="h"))
dev.off()
ggarrange(p4,p5,nrow=1,ncol=2,widths = c(5,1),align="h")
psglom <- psFR
tax_table(psglom) <- tax_table(psglom)[,2:7]
psglom = tax_glom(psreal, "Species", NArm = TRUE)
psglom <- transform_sample_counts(psglom, fun= proportions) # Reset scale to 1 following NArm
psglom = filter_taxa(psglom, function(x) mean(x) > 0, TRUE)
p4 <- plot_heatmap(psglom, "NMDS", "bray", taxa.label="Species", taxa.order="Family") + theme_pubr()  + scale_x_discrete(limits = positions) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank(),legend.position="none") + scale_fill_viridis(trans=log_trans(10), na.value="grey10")
##Presence absense for each gene
mdt = fast_melt(psFR)
summarydt = mdt[, list(totalRA = sum(RelativeAbundance)),
by = c("Gene","Order","Family", "Genus","Species", "SampleID", "taxaID")]
summarydt <- summarydt[!is.na(summarydt$Species)]
summarydt$totalRA[summarydt$totalRA > 0] <- 1
#Attempt rearragning  - Losing the duplicates Here!
rankcol = which(rank_names(psglom) %in% "Family")
taxmat = as(tax_table(psglom)[, 1:rankcol], "matrix")
taxa.order = apply(taxmat, 1, paste, sep = "", collapse = "")
names(taxa.order) <- taxa_names(psglom)
taxa.order = as.tibble(names(sort(taxa.order, na.last = TRUE)))
colnames(taxa.order) <- "taxaID"
taxa.order$seq <- seq(1:nrow(taxa.order))
reorder <- full_join(taxa.order,summarydt,by="taxaID")
reorder$Species <- factor(reorder$Species, levels = unique(reorder$Species[order(reorder$seq)]))
p5 <- ggplot(reorder, aes(Gene, Species)) + geom_point(aes(colour = Gene),size=3) + theme_void() + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank())
ggarrange(p4,p5,nrow=1,ncol=2,widths = c(5,1),align="h")
psglom
p4 <- plot_heatmap(psglom, "NMDS", "bray", taxa.label="Species", taxa.order="Family") + theme_pubr()  + scale_x_discrete(limits = positions) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank(),legend.position="none") + scale_fill_viridis(trans=log_trans(10), na.value="grey10") + geom_text(psglom$Species)
p4 <- plot_heatmap(psglom, "NMDS", "bray", taxa.label="Species", taxa.order="Family") + theme_pubr()  + scale_x_discrete(limits = positions) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank(),legend.position="none") + scale_fill_viridis(trans=log_trans(10), na.value="grey10")
p4 + geom_text(psglom$Species)
psglom$Species
p4 <- plot_heatmap(psglom, "NMDS", "bray", taxa.label="Species", taxa.order="Family") + theme_pubr()  + scale_x_discrete(limits = positions) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank(),legend.position="none") + scale_fill_viridis(trans=log_trans(10), na.value="grey10")
ggarrange(p4,p5,nrow=1,ncol=2,widths = c(5,1),align="h")
reorder
p5 <- ggplot(reorder, aes(Gene, Species)) + geom_point(aes(colour = Gene),size=3) + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank()) #+ theme_void()
p5
p5 <- ggplot(reorder, aes(Gene, Species)) + geom_point(aes(colour = Gene),size=3) + theme(legend.position="none") + coord_fixed(ratio=.5) + theme(axis.text.x = element_text(angle=60, hjust=1), axis.title.x=element_blank(), axis.title.y=element_blank()) + theme_void()
p5
p4 + geom_text(reorder$Order)
p4 + geom_text(reorder aes(Gene, Order))
p4 + geom_text(reorder, aes(Gene, Order))
p4 + geom_text(aes(reorder$Gene, reorder$Order))
p4 + geom_text(aes(x=1, reorder$Order))
p4 + geom_text(aes(x=1, y= reorder$Order))
pname <- ggplot(reorder, aes(Gene, Order) + geom_text()
pname <- ggplot(reorder, aes(Gene, Order) )+ geom_text()
pname <- ggplot(reorder, aes(Gene, Order) )+ geom_text()
pname
pname <- ggplot(reorder, aes(Gene, Order) )+ geom_text(label=Order)
pname <- ggplot(reorder, aes(Gene, Order) )+ geom_text(label=reorder$Order)
pna,me
pname
pname <- ggplot(reorder, aes(Gene, Species) )+ geom_text(label=reorder$Order)
pname
pname <- ggplot(reorder, aes(x=1, Species) )+ geom_text(label=reorder$Order)
pname
pname <- ggplot(reorder, aes(x=1, Species) )+ geom_segment( aes(x=1, y=Order, yend=Order))+ geom geom_text(label=reorder$Order)
pname <- ggplot(reorder, aes(x=1, Species) )+ geom_segment( aes(x=1, y=Order))+ geom geom_text(label=reorder$Order)
pname <- ggplot(reorder, aes(x=1, Species) ) + geom_segment(aes(x=1, y=Order) )+ geom geom_text(label=reorder$Order)
pname <- ggplot(reorder, aes(x=1, Species) ) + geom_segment(aes(x=1, y=Order) )+ geom geom_text(label=reorder$Order)
pname <- ggplot(reorder, aes(x=1, Species) ) + geom_segment(aes(x=1, y=Order) )+ geom_text(label=reorder$Order)
pname
pname <- ggplot(reorder, aes(x=1, Species) ) + geom_segment(aes(x=1, y=Order, yend=Order) )+ geom_text(label=reorder$Order)
pname
pname <- ggplot(reorder, aes(x=1, Species) ) + geom_segment(aes(x=1,xend=1, y=Order, yend=Order) )+ geom_text(label=reorder$Order)
pname
pname <- ggplot(reorder, aes(x=1, Species) ) + geom_tile(aes(fill=Order),+ geom_text(label=reorder$Order)
pname <- ggplot(reorder, aes(x=1, Species) ) + geom_tile(aes(fill=Order)+ geom_text(label=reorder$Order)
pname <- ggplot(reorder, aes(x=1, Species) ) + geom_tile(aes(fill=Order)+ geom_text(label=reorder$Order)
)
pname <- ggplot(reorder, aes(x=1, Species) ) + geom_tile(aes(fill=Order))+ geom_text(label=reorder$Order)
pname
pname <- ggplot(reorder, aes(x=c(1), Species) ) + geom_tile(aes(fill=Order))+ geom_text(label=reorder$Order)
pname
pname <- ggplot(reorder, aes(x=c(1), Species) ) + geom_tile(aes(fill=Order))+ geom_text(label=reorder$Order) + theme_void()
pname
p4 <- plot_heatmap(psglom, "NMDS", "bray", taxa.label="Species", taxa.order="Family") + theme_pubr()  + scale_x_discrete(limits = positions) + theme(axis.text.x = element_text(angle=60, hjust=1, colour="Order"), axis.title.x=element_blank(), axis.title.y=element_blank(),legend.position="none") + scale_fill_viridis(trans=log_trans(10), na.value="grey10")
p5
p4
p4 <- plot_heatmap(psglom, "NMDS", "bray", taxa.label="Species", taxa.order="Family") + theme_pubr()  + scale_x_discrete(limits = positions) + theme(axis.text.x = element_text(angle=60, hjust=1, colour=Order), axis.title.x=element_blank(), axis.title.y=element_blank(),legend.position="none") + scale_fill_viridis(trans=log_trans(10), na.value="grey10")
p4
